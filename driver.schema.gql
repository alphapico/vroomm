# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Point {
  lat: Float!
  lng: Float!
}

type CarModel {
  id: ID!
  name: String!
}

type CarColor {
  id: ID!
  name: String!
}

type Media {
  id: ID!
  address: String!
  base64: String
}

type Passenger {
  id: ID!
  firstName: String
  lastName: String
  mobileNumber: String!
  media: Media
}

type Service {
  id: ID!
  name: String!
  paymentMethod: ServicePaymentMethod!
  cancellationTotalFee: Float!
  media: Media!
}

enum ServicePaymentMethod {
  CashCredit
  OnlyCredit
  OnlyCash
}

type OrderMessage {
  id: ID!
  sentAt: Timestamp!
  status: MessageStatus!
  content: String!
  sentByDriver: Boolean!
  orderId: ID!
  order: Order!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

enum MessageStatus {
  Sent
  Delivered
  Seen
}

type ServiceOption {
  id: ID!
  name: String!
  type: ServiceOptionType!
  additionalFee: Float
  icon: ServiceOptionIcon!
}

enum ServiceOptionType {
  Free
  Paid
  TwoWay
}

enum ServiceOptionIcon {
  Pet
  TwoWay
  Luggage
  PackageDelivery
  Shopping
  Custom1
  Custom2
  Custom3
  Custom4
  Custom5
}

type Order {
  id: ID!
  status: OrderStatus!
  createdOn: Timestamp!
  distanceBest: Int!
  durationBest: Int!
  startTimestamp: Timestamp
  finishTimestamp: Timestamp
  etaPickup: Timestamp
  waitMinutes: Float!
  expectedTimestamp: Timestamp!
  costBest: Float!
  costAfterCoupon: Float!
  providerShare: Float!
  paidAmount: Float!
  currency: String!
  addresses: [String!]!
  points: [Point!]!
  tipAmount: Float!
  paymentGatewayId: ID
  directions: [Point!]!
  optionsAggregate(
    """Filter to find records to aggregate on"""
    filter: ServiceOptionAggregateFilter
  ): [OrderOptionsAggregateResponse!]!
  conversationsAggregate(
    """Filter to find records to aggregate on"""
    filter: OrderMessageAggregateFilter
  ): [OrderConversationsAggregateResponse!]!
  driver: Driver!
  passenger: Passenger!
  service: Service!
  options(
    """Specify to filter the records returned."""
    filter: ServiceOptionFilter = {}

    """Specify to sort results."""
    sorting: [ServiceOptionSort!] = []
  ): [ServiceOption!]!
  conversations(
    """Specify to filter the records returned."""
    filter: OrderMessageFilter = {}

    """Specify to sort results."""
    sorting: [OrderMessageSort!] = []
  ): [OrderMessage!]!
}

enum OrderStatus {
  Requested
  NotFound
  NoCloseFound
  Found
  DriverAccepted
  Arrived
  WaitingForPrePay
  DriverCanceled
  PassengerCanceled
  Started
  WaitingForPostPay
  WaitingForReview
  Finished
  Booked
  Expired
}

input ServiceOptionAggregateFilter {
  and: [ServiceOptionAggregateFilter!]
  or: [ServiceOptionAggregateFilter!]
  id: IDFilterComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input OrderMessageAggregateFilter {
  and: [OrderMessageAggregateFilter!]
  or: [OrderMessageAggregateFilter!]
  id: IDFilterComparison
  orderId: IDFilterComparison
}

input ServiceOptionFilter {
  and: [ServiceOptionFilter!]
  or: [ServiceOptionFilter!]
  id: IDFilterComparison
}

input ServiceOptionSort {
  field: ServiceOptionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ServiceOptionSortFields {
  id
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input OrderMessageFilter {
  and: [OrderMessageFilter!]
  or: [OrderMessageFilter!]
  id: IDFilterComparison
  orderId: IDFilterComparison
}

input OrderMessageSort {
  field: OrderMessageSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OrderMessageSortFields {
  id
  orderId
}

type DriverWallet {
  id: ID!
  balance: Float!
  currency: String!
}

type Driver {
  id: ID!
  firstName: String
  lastName: String
  mobileNumber: String!
  certificateNumber: String
  email: String
  carProductionYear: Int
  carPlate: String
  status: DriverStatus!
  gender: Gender
  registrationTimestamp: Timestamp!
  lastSeenTimestamp: Timestamp
  accountNumber: String
  bankName: String
  bankRoutingNumber: String
  bankSwift: String
  address: String
  softRejectionNote: String
  carModelId: ID
  carColorId: ID
  searchDistance: Int
  car: CarModel
  carColor: CarColor
  media: Media
  documents(
    """Specify to filter the records returned."""
    filter: MediaFilter = {}

    """Specify to sort results."""
    sorting: [MediaSort!] = []
  ): [Media!]!
  orders(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1}

    """Specify to filter the records returned."""
    filter: OrderFilter = {status: {in: [DriverAccepted, Arrived, Started, WaitingForPostPay]}}

    """Specify to sort results."""
    sorting: [OrderSort!] = [{field: id, direction: DESC}]
  ): DriverOrdersConnection!
  currentOrders(
    """Specify to filter the records returned."""
    filter: OrderFilter = {status: {in: [DriverAccepted, Arrived, Started, WaitingForPostPay]}}

    """Specify to sort results."""
    sorting: [OrderSort!] = [{field: id, direction: DESC}]
  ): [Order!]!
  wallets(
    """Specify to filter the records returned."""
    filter: DriverWalletFilter = {}

    """Specify to sort results."""
    sorting: [DriverWalletSort!] = []
  ): [DriverWallet!]!
}

enum DriverStatus {
  Online
  Offline
  Blocked
  InService
  WaitingDocuments
  PendingApproval
  SoftReject
  HardReject
}

enum Gender {
  Male
  Female
  Unknown
}

input MediaFilter {
  and: [MediaFilter!]
  or: [MediaFilter!]
  id: IDFilterComparison
}

input MediaSort {
  field: MediaSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum MediaSortFields {
  id
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

input OrderFilter {
  and: [OrderFilter!]
  or: [OrderFilter!]
  id: IDFilterComparison
  status: OrderStatusFilterComparison
  createdOn: DateFieldComparison
  costBest: NumberFieldComparison
  driverId: IDFilterComparison
}

input OrderStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: OrderStatus
  neq: OrderStatus
  gt: OrderStatus
  gte: OrderStatus
  lt: OrderStatus
  lte: OrderStatus
  like: OrderStatus
  notLike: OrderStatus
  iLike: OrderStatus
  notILike: OrderStatus
  in: [OrderStatus!]
  notIn: [OrderStatus!]
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input OrderSort {
  field: OrderSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OrderSortFields {
  id
  status
  createdOn
  costBest
  driverId
}

input DriverWalletFilter {
  and: [DriverWalletFilter!]
  or: [DriverWalletFilter!]
  id: IDFilterComparison
  driverId: IDFilterComparison
}

input DriverWalletSort {
  field: DriverWalletSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum DriverWalletSortFields {
  id
  driverId
}

type DriverEdge {
  """The node containing the Driver"""
  node: Driver!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

type DriverOrdersConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Order!]!
}

type Login {
  jwtToken: String!
}

type OrderEdge {
  """The node containing the Order"""
  node: Order!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type OrderConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [OrderEdge!]!
}

type OrderAggregateGroupBy {
  id: ID
  status: OrderStatus
  createdOn: Timestamp
  costBest: Float
  driverId: ID
}

type OrderCountAggregate {
  id: Int
  status: Int
  createdOn: Int
  costBest: Int
  driverId: Int
}

type OrderSumAggregate {
  id: Float
  costBest: Float
  driverId: Float
}

type OrderAvgAggregate {
  id: Float
  costBest: Float
  driverId: Float
}

type OrderMinAggregate {
  id: ID
  status: OrderStatus
  createdOn: Timestamp
  costBest: Float
  driverId: ID
}

type OrderMaxAggregate {
  id: ID
  status: OrderStatus
  createdOn: Timestamp
  costBest: Float
  driverId: ID
}

type OrderAggregateResponse {
  groupBy: OrderAggregateGroupBy
  count: OrderCountAggregate
  sum: OrderSumAggregate
  avg: OrderAvgAggregate
  min: OrderMinAggregate
  max: OrderMaxAggregate
}

type OrderConversationsAggregateGroupBy {
  id: ID
  orderId: ID
}

type OrderConversationsCountAggregate {
  id: Int
  orderId: Int
}

type OrderConversationsSumAggregate {
  id: Float
  orderId: Float
}

type OrderConversationsAvgAggregate {
  id: Float
  orderId: Float
}

type OrderConversationsMinAggregate {
  id: ID
  orderId: ID
}

type OrderConversationsMaxAggregate {
  id: ID
  orderId: ID
}

type OrderConversationsAggregateResponse {
  groupBy: OrderConversationsAggregateGroupBy
  count: OrderConversationsCountAggregate
  sum: OrderConversationsSumAggregate
  avg: OrderConversationsAvgAggregate
  min: OrderConversationsMinAggregate
  max: OrderConversationsMaxAggregate
}

type OrderOptionsAggregateGroupBy {
  id: ID
}

type OrderOptionsCountAggregate {
  id: Int
}

type OrderOptionsSumAggregate {
  id: Float
}

type OrderOptionsAvgAggregate {
  id: Float
}

type OrderOptionsMinAggregate {
  id: ID
}

type OrderOptionsMaxAggregate {
  id: ID
}

type OrderOptionsAggregateResponse {
  groupBy: OrderOptionsAggregateGroupBy
  count: OrderOptionsCountAggregate
  sum: OrderOptionsSumAggregate
  avg: OrderOptionsAvgAggregate
  min: OrderOptionsMinAggregate
  max: OrderOptionsMaxAggregate
}

type PassengerEdge {
  """The node containing the Passenger"""
  node: Passenger!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type MediaEdge {
  """The node containing the Media"""
  node: Media!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type Announcement {
  id: ID!
  title: String!
  description: String!
  startAt: Timestamp!
  expireAt: Timestamp!
  url: String
  userType: AnnouncementUserType!
}

enum AnnouncementUserType {
  Driver
  Passenger
  Operator
}

type DriverTransacion {
  id: ID!
  createdAt: Timestamp!
  action: TransactionAction!
  deductType: DriverDeductTransactionType
  rechargeType: DriverRechargeTransactionType
  amount: Float!
  currency: String!
  refrenceNumber: String
}

enum TransactionAction {
  Recharge
  Deduct
}

enum DriverDeductTransactionType {
  Withdraw
  Commission
  Correction
}

enum DriverRechargeTransactionType {
  OrderFee
  BankTransfer
  InAppPayment
  Gift
}

type PaymentGateway {
  id: ID!
  enabled: Boolean!
  title: String!
  type: PaymentGatewayType!
  publicKey: String
  media: Media
}

enum PaymentGatewayType {
  Stripe
  BrainTree
  PayPal
  CustomLink
}

type StatisticsResult {
  currency: String!
  dataset: [Datapoint!]!
}

type Datapoint {
  name: String!
  current: String!
  earning: Float!
  count: Float!
  distance: Float!
  time: Float!
}

type TopUpWalletResponse {
  status: TopUpWalletStatus!
  url: String!
}

enum TopUpWalletStatus {
  OK
  Redirect
}

type DriverTransacionEdge {
  """The node containing the DriverTransacion"""
  node: DriverTransacion!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type DriverTransacionConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [DriverTransacionEdge!]!
}

type ServiceEdge {
  """The node containing the Service"""
  node: Service!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type Complaint {
  id: ID!
  subject: String!
  content: String
  status: ComplaintStatus!
}

enum ComplaintStatus {
  Submitted
  UnderInvestigation
  Resolved
}

type ComplaintEdge {
  """The node containing the Complaint"""
  node: Complaint!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

input PointInput {
  lat: Float!
  lng: Float!
}

type Query {
  requireUpdate(versionCode: Int!): VersionStatus!
  driver(
    """The id of the record to find."""
    id: ID!
  ): Driver!
  carModels(
    """Specify to filter the records returned."""
    filter: CarModelFilter = {}

    """Specify to sort results."""
    sorting: [CarModelSort!] = []
  ): [CarModel!]!
  carColors(
    """Specify to filter the records returned."""
    filter: CarColorFilter = {}

    """Specify to sort results."""
    sorting: [CarColorSort!] = []
  ): [CarColor!]!
  orderAggregate(
    """Filter to find records to aggregate on"""
    filter: OrderAggregateFilter
  ): [OrderAggregateResponse!]!
  order(
    """The id of the record to find."""
    id: ID!
  ): Order!
  orders(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: OrderFilter = {}

    """Specify to sort results."""
    sorting: [OrderSort!] = []
  ): OrderConnection!
  availableOrders: [Order!]!
  orderMessages(
    """Specify to filter the records returned."""
    filter: OrderMessageFilter = {}

    """Specify to sort results."""
    sorting: [OrderMessageSort!] = []
  ): [OrderMessage!]!
  getStats(timeframe: TimeQuery!): StatisticsResult!
  getStatsNew(timeframe: TimeQuery!, startDate: DateTime!, endDate: DateTime!): StatisticsResult!
  driverTransacions(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: DriverTransacionFilter = {}

    """Specify to sort results."""
    sorting: [DriverTransacionSort!] = []
  ): DriverTransacionConnection!
  driverWallets(
    """Specify to filter the records returned."""
    filter: DriverWalletFilter = {}

    """Specify to sort results."""
    sorting: [DriverWalletSort!] = []
  ): [DriverWallet!]!
  paymentGateways(
    """Specify to filter the records returned."""
    filter: PaymentGatewayFilter = {}

    """Specify to sort results."""
    sorting: [PaymentGatewaySort!] = []
  ): [PaymentGateway!]!
  announcements(
    """Specify to filter the records returned."""
    filter: AnnouncementFilter = {}

    """Specify to sort results."""
    sorting: [AnnouncementSort!] = []
  ): [Announcement!]!
}

enum VersionStatus {
  Latest
  MandatoryUpdate
  OptionalUpdate
}

input CarModelFilter {
  and: [CarModelFilter!]
  or: [CarModelFilter!]
  id: IDFilterComparison
}

input CarModelSort {
  field: CarModelSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CarModelSortFields {
  id
}

input CarColorFilter {
  and: [CarColorFilter!]
  or: [CarColorFilter!]
  id: IDFilterComparison
}

input CarColorSort {
  field: CarColorSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CarColorSortFields {
  id
}

input OrderAggregateFilter {
  and: [OrderAggregateFilter!]
  or: [OrderAggregateFilter!]
  id: IDFilterComparison
  status: OrderStatusFilterComparison
  createdOn: DateFieldComparison
  costBest: NumberFieldComparison
  driverId: IDFilterComparison
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

enum TimeQuery {
  Daily
  Weekly
  Monthly
}

input DriverTransacionFilter {
  and: [DriverTransacionFilter!]
  or: [DriverTransacionFilter!]
  id: IDFilterComparison
  action: TransactionActionFilterComparison
  deductType: DriverDeductTransactionTypeFilterComparison
  rechargeType: DriverRechargeTransactionTypeFilterComparison
  amount: FloatFieldComparison
  driverId: IDFilterComparison
}

input TransactionActionFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: TransactionAction
  neq: TransactionAction
  gt: TransactionAction
  gte: TransactionAction
  lt: TransactionAction
  lte: TransactionAction
  like: TransactionAction
  notLike: TransactionAction
  iLike: TransactionAction
  notILike: TransactionAction
  in: [TransactionAction!]
  notIn: [TransactionAction!]
}

input DriverDeductTransactionTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: DriverDeductTransactionType
  neq: DriverDeductTransactionType
  gt: DriverDeductTransactionType
  gte: DriverDeductTransactionType
  lt: DriverDeductTransactionType
  lte: DriverDeductTransactionType
  like: DriverDeductTransactionType
  notLike: DriverDeductTransactionType
  iLike: DriverDeductTransactionType
  notILike: DriverDeductTransactionType
  in: [DriverDeductTransactionType!]
  notIn: [DriverDeductTransactionType!]
}

input DriverRechargeTransactionTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: DriverRechargeTransactionType
  neq: DriverRechargeTransactionType
  gt: DriverRechargeTransactionType
  gte: DriverRechargeTransactionType
  lt: DriverRechargeTransactionType
  lte: DriverRechargeTransactionType
  like: DriverRechargeTransactionType
  notLike: DriverRechargeTransactionType
  iLike: DriverRechargeTransactionType
  notILike: DriverRechargeTransactionType
  in: [DriverRechargeTransactionType!]
  notIn: [DriverRechargeTransactionType!]
}

input FloatFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: FloatFieldComparisonBetween
  notBetween: FloatFieldComparisonBetween
}

input FloatFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input DriverTransacionSort {
  field: DriverTransacionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum DriverTransacionSortFields {
  id
  action
  deductType
  rechargeType
  amount
  driverId
}

input PaymentGatewayFilter {
  and: [PaymentGatewayFilter!]
  or: [PaymentGatewayFilter!]
  id: IDFilterComparison
  enabled: BooleanFieldComparison
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input PaymentGatewaySort {
  field: PaymentGatewaySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PaymentGatewaySortFields {
  id
  enabled
}

input AnnouncementFilter {
  and: [AnnouncementFilter!]
  or: [AnnouncementFilter!]
  id: IDFilterComparison
  userType: AnnouncementUserTypeFilterComparison
}

input AnnouncementUserTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: AnnouncementUserType
  neq: AnnouncementUserType
  gt: AnnouncementUserType
  gte: AnnouncementUserType
  lt: AnnouncementUserType
  lte: AnnouncementUserType
  like: AnnouncementUserType
  notLike: AnnouncementUserType
  iLike: AnnouncementUserType
  notILike: AnnouncementUserType
  in: [AnnouncementUserType!]
  notIn: [AnnouncementUserType!]
}

input AnnouncementSort {
  field: AnnouncementSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum AnnouncementSortFields {
  id
  userType
}

type Mutation {
  login(input: LoginInput!): Login!
  deleteUser: Driver!
  addDocumentsToDriver(input: AddDocumentsToDriverInput!): Driver!
  setDocumentsOnDriver(input: SetDocumentsOnDriverInput!): Driver!
  updateOneDriver(input: UpdateOneDriverInput!): Driver!
  updateOneOrder(input: UpdateOneOrderInput!): Order!
  updateDriversLocationNew(point: PointInput!): [Order!]!
  createOneOrderMessage(input: CreateOneOrderMessageInput!): OrderMessage!
  topUpWallet(input: TopUpWalletInput!): TopUpWalletResponse!
  createOneComplaint(input: CreateOneComplaintInput!): Complaint!
}

input LoginInput {
  firebaseToken: String!
}

input AddDocumentsToDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetDocumentsOnDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input UpdateOneDriverInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDriverInput!
}

input UpdateDriverInput {
  firstName: String
  lastName: String
  status: DriverStatus
  certificateNumber: String
  email: String
  carProductionYear: Int
  carPlate: String
  mediaId: ID
  gender: Gender
  accountNumber: String
  bankName: String
  bankRoutingNumber: String
  bankSwift: String
  address: String
  carModelId: ID
  carColorId: ID
  notificationPlayerId: String
  searchDistance: Int
}

input UpdateOneOrderInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOrderInput!
}

input UpdateOrderInput {
  status: OrderStatus!
  paidAmount: Float
}

input CreateOneOrderMessageInput {
  """The record to create"""
  orderMessage: OrderMessageInput!
}

input OrderMessageInput {
  orderId: ID!
  content: String!
}

input TopUpWalletInput {
  gatewayId: ID!
  amount: Float!
  currency: String!
  token: String
  pin: Float
  otp: Float
  transactionId: String
}

input CreateOneComplaintInput {
  """The record to create"""
  complaint: ComplaintInput!
}

input ComplaintInput {
  orderId: ID!
  subject: String!
  content: String
  requestedByDriver: Boolean
}

type Subscription {
  newMessageReceived: OrderMessage!
  orderCreated: Order!
  orderUpdated: Order!
  orderRemoved: Order!
}