# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Point {
  lat: Float!
  lng: Float!
}

type DistanceMultiplier {
  distanceFrom: Float!
  distanceTo: Float!
  multiply: Float!
}

type TimeMultiplier {
  startTime: String!
  endTime: String!
  multiply: Float!
}

type CarColor {
  id: ID!
  name: String!
}

type CarModel {
  id: ID!
  name: String!
}

type CarModelDeleteResponse {
  id: ID
  name: String
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

type CarModelConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [CarModel!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type CarColorDeleteResponse {
  id: ID
  name: String
}

type Operator {
  id: ID!
  firstName: String!
  lastName: String!
  userName: String!
  mobileNumber: String!
  email: String!
  roleId: ID!
}

type DriverTransaction {
  createdAt: DateTime!
  action: TransactionAction!
  status: TransactionStatus!
  deductType: DriverDeductTransactionType!
  rechargeType: DriverRechargeTransactionType!
  amount: Float!
  currency: String!
  refrenceNumber: String!
  driverId: ID!
  paymentGatewayId: ID!
  operatorId: ID!
  requestId: ID!
  description: String!
  operator: Operator
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum TransactionAction {
  Recharge
  Deduct
}

enum TransactionStatus {
  Processing
  Done
  Canceled
  Rejected
}

enum DriverDeductTransactionType {
  Withdraw
  Commission
  Correction
}

enum DriverRechargeTransactionType {
  OrderFee
  BankTransfer
  InAppPayment
  Gift
}

type Region {
  id: ID!
  name: String!
  currency: String!
  enabled: Boolean!
  location: [[Point!]!]!
}

type Media {
  id: ID!
  address: String!
  base64: String!
}

type ServiceOption {
  id: ID!
  name: String!
  type: ServiceOptionType!
  additionalFee: Float!
  icon: ServiceOptionIcon!
  serviceId: ID!
}

enum ServiceOptionType {
  Free
  Paid
  TwoWay
}

enum ServiceOptionIcon {
  Pet
  TwoWay
  Luggage
  PackageDelivery
  Shopping
  Custom1
  Custom2
  Custom3
  Custom4
  Custom5
}

type Service {
  id: ID!
  name: String!
  description: String!
  personCapacity: Int!
  categoryId: ID!
  baseFare: Float!
  roundingFactor: Float!
  perHundredMeters: Float!
  perMinuteDrive: Float!
  perMinuteWait: Float!
  prepayPercent: Float!
  minimumFee: Float!
  searchRadius: Int!
  paymentMethod: ServicePaymentMethod!
  cancellationTotalFee: Float!
  cancellationDriverShare: Float!
  providerSharePercent: Int!
  providerShareFlat: Float!
  twoWayAvailable: Boolean!
  maximumDestinationDistance: Int!
  timeMultipliers: [TimeMultiplier!]!
  distanceMultipliers: [DistanceMultiplier!]!
  mediaId: ID!
  media: Media!
  options: ServiceOption!
  regions(
    """Specify to filter the records returned."""
    filter: RegionFilter = {}

    """Specify to sort results."""
    sorting: [RegionSort!] = []
  ): [Region!]!
}

enum ServicePaymentMethod {
  CashCredit
  OnlyCredit
  OnlyCash
}

input RegionFilter {
  and: [RegionFilter!]
  or: [RegionFilter!]
  id: IDFilterComparison
  currency: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input RegionSort {
  field: RegionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum RegionSortFields {
  id
  currency
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type Driver {
  id: ID!
  firstName: String!
  lastName: String!
  mobileNumber: String!
  certificateNumber: String!
  email: String!
  carProductionYear: Int!
  carId: ID!
  carColorId: ID!
  carPlate: String!
  status: DriverStatus!
  gender: Gender!
  rating: Int!
  reviewCount: Int!
  registrationTimestamp: DateTime!
  lastSeenTimestamp: DateTime!
  accountNumber: String!
  bankName: String!
  bankRoutingNumber: String!
  bankSwift: String!
  address: String!
  softRejectionNote: String!
  mediaId: ID!
  walletsAggregate(
    """Filter to find records to aggregate on"""
    filter: DriverWalletAggregateFilter
  ): [DriverWalletsAggregateResponse!]!
  enabledServicesAggregate(
    """Filter to find records to aggregate on"""
    filter: ServiceAggregateFilter
  ): [DriverEnabledServicesAggregateResponse!]!
  documentsAggregate(
    """Filter to find records to aggregate on"""
    filter: MediaAggregateFilter
  ): [DriverDocumentsAggregateResponse!]!
  transactionsAggregate(
    """Filter to find records to aggregate on"""
    filter: DriverTransactionAggregateFilter
  ): [DriverTransactionsAggregateResponse!]!
  media: Media
  wallets(
    """Specify to filter the records returned."""
    filter: DriverWalletFilter = {}

    """Specify to sort results."""
    sorting: [DriverWalletSort!] = []
  ): [DriverWallet!]!
  enabledServices(
    """Specify to filter the records returned."""
    filter: ServiceFilter = {}

    """Specify to sort results."""
    sorting: [ServiceSort!] = []
  ): [Service!]!
  documents(
    """Specify to filter the records returned."""
    filter: MediaFilter = {}

    """Specify to sort results."""
    sorting: [MediaSort!] = []
  ): [Media!]!
  transactions(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: DriverTransactionFilter = {}

    """Specify to sort results."""
    sorting: [DriverTransactionSort!] = []
  ): DriverTransactionsConnection!
}

enum DriverStatus {
  Online
  Offline
  Blocked
  InService
  WaitingDocuments
  PendingApproval
  SoftReject
  HardReject
}

enum Gender {
  Male
  Female
  Unknown
}

input DriverWalletAggregateFilter {
  and: [DriverWalletAggregateFilter!]
  or: [DriverWalletAggregateFilter!]
  id: IDFilterComparison
  balance: FloatFieldComparison
  currency: StringFieldComparison
  driverId: IDFilterComparison
}

input FloatFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: FloatFieldComparisonBetween
  notBetween: FloatFieldComparisonBetween
}

input FloatFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input ServiceAggregateFilter {
  and: [ServiceAggregateFilter!]
  or: [ServiceAggregateFilter!]
  id: IDFilterComparison
  categoryId: IDFilterComparison
}

input MediaAggregateFilter {
  and: [MediaAggregateFilter!]
  or: [MediaAggregateFilter!]
  id: IDFilterComparison
}

input DriverTransactionAggregateFilter {
  and: [DriverTransactionAggregateFilter!]
  or: [DriverTransactionAggregateFilter!]
  createdAt: DateFieldComparison
  driverId: IDFilterComparison
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input DriverWalletFilter {
  and: [DriverWalletFilter!]
  or: [DriverWalletFilter!]
  id: IDFilterComparison
  balance: FloatFieldComparison
  currency: StringFieldComparison
  driverId: IDFilterComparison
}

input DriverWalletSort {
  field: DriverWalletSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum DriverWalletSortFields {
  id
  balance
  currency
  driverId
}

input ServiceFilter {
  and: [ServiceFilter!]
  or: [ServiceFilter!]
  id: IDFilterComparison
  categoryId: IDFilterComparison
}

input ServiceSort {
  field: ServiceSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ServiceSortFields {
  id
  categoryId
}

input MediaFilter {
  and: [MediaFilter!]
  or: [MediaFilter!]
  id: IDFilterComparison
}

input MediaSort {
  field: MediaSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum MediaSortFields {
  id
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

input DriverTransactionFilter {
  and: [DriverTransactionFilter!]
  or: [DriverTransactionFilter!]
  createdAt: DateFieldComparison
  driverId: IDFilterComparison
}

input DriverTransactionSort {
  field: DriverTransactionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum DriverTransactionSortFields {
  createdAt
  driverId
}

type DriverWallet {
  id: ID!
  balance: Float!
  currency: String!
  driverId: ID!
  driver: Driver!
}

type DriverConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Driver!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type DriverAggregateGroupBy {
  id: ID
  lastName: String
  mobileNumber: String
  status: DriverStatus
}

type DriverCountAggregate {
  id: Int
  lastName: Int
  mobileNumber: Int
  status: Int
}

type DriverSumAggregate {
  id: Float
}

type DriverAvgAggregate {
  id: Float
}

type DriverMinAggregate {
  id: ID
  lastName: String
  mobileNumber: String
  status: DriverStatus
}

type DriverMaxAggregate {
  id: ID
  lastName: String
  mobileNumber: String
  status: DriverStatus
}

type DriverAggregateResponse {
  groupBy: DriverAggregateGroupBy
  count: DriverCountAggregate
  sum: DriverSumAggregate
  avg: DriverAvgAggregate
  min: DriverMinAggregate
  max: DriverMaxAggregate
}

type DriverTransactionsConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [DriverTransaction!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type DriverTransactionsAggregateGroupBy {
  createdAt: DateTime
  driverId: ID
}

type DriverTransactionsCountAggregate {
  createdAt: Int
  driverId: Int
}

type DriverTransactionsSumAggregate {
  driverId: Float
}

type DriverTransactionsAvgAggregate {
  driverId: Float
}

type DriverTransactionsMinAggregate {
  createdAt: DateTime
  driverId: ID
}

type DriverTransactionsMaxAggregate {
  createdAt: DateTime
  driverId: ID
}

type DriverTransactionsAggregateResponse {
  groupBy: DriverTransactionsAggregateGroupBy
  count: DriverTransactionsCountAggregate
  sum: DriverTransactionsSumAggregate
  avg: DriverTransactionsAvgAggregate
  min: DriverTransactionsMinAggregate
  max: DriverTransactionsMaxAggregate
}

type DriverDocumentsAggregateGroupBy {
  id: ID
}

type DriverDocumentsCountAggregate {
  id: Int
}

type DriverDocumentsSumAggregate {
  id: Float
}

type DriverDocumentsAvgAggregate {
  id: Float
}

type DriverDocumentsMinAggregate {
  id: ID
}

type DriverDocumentsMaxAggregate {
  id: ID
}

type DriverDocumentsAggregateResponse {
  groupBy: DriverDocumentsAggregateGroupBy
  count: DriverDocumentsCountAggregate
  sum: DriverDocumentsSumAggregate
  avg: DriverDocumentsAvgAggregate
  min: DriverDocumentsMinAggregate
  max: DriverDocumentsMaxAggregate
}

type DriverEnabledServicesAggregateGroupBy {
  id: ID
  categoryId: ID
}

type DriverEnabledServicesCountAggregate {
  id: Int
  categoryId: Int
}

type DriverEnabledServicesSumAggregate {
  id: Float
  categoryId: Float
}

type DriverEnabledServicesAvgAggregate {
  id: Float
  categoryId: Float
}

type DriverEnabledServicesMinAggregate {
  id: ID
  categoryId: ID
}

type DriverEnabledServicesMaxAggregate {
  id: ID
  categoryId: ID
}

type DriverEnabledServicesAggregateResponse {
  groupBy: DriverEnabledServicesAggregateGroupBy
  count: DriverEnabledServicesCountAggregate
  sum: DriverEnabledServicesSumAggregate
  avg: DriverEnabledServicesAvgAggregate
  min: DriverEnabledServicesMinAggregate
  max: DriverEnabledServicesMaxAggregate
}

type DriverWalletsAggregateGroupBy {
  id: ID
  balance: Float
  currency: String
  driverId: ID
}

type DriverWalletsCountAggregate {
  id: Int
  balance: Int
  currency: Int
  driverId: Int
}

type DriverWalletsSumAggregate {
  id: Float
  balance: Float
  driverId: Float
}

type DriverWalletsAvgAggregate {
  id: Float
  balance: Float
  driverId: Float
}

type DriverWalletsMinAggregate {
  id: ID
  balance: Float
  currency: String
  driverId: ID
}

type DriverWalletsMaxAggregate {
  id: ID
  balance: Float
  currency: String
  driverId: ID
}

type DriverWalletsAggregateResponse {
  groupBy: DriverWalletsAggregateGroupBy
  count: DriverWalletsCountAggregate
  sum: DriverWalletsSumAggregate
  avg: DriverWalletsAvgAggregate
  min: DriverWalletsMinAggregate
  max: DriverWalletsMaxAggregate
}

type DriverWalletConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [DriverWallet!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type DriverTransactionConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [DriverTransaction!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type OperatorRole {
  id: ID!
  title: String!
  permissions: [OperatorPermission!]!
}

enum OperatorPermission {
  Drivers_View
  Drivers_Edit
  Riders_View
  Riders_Edit
  Regions_View
  Regions_Edit
  Services_View
  Services_Edit
  Complaints_View
  Complaints_Edit
  Coupons_View
  Coupons_Edit
  Announcements_View
  Announcements_Edit
  Requests_View
  Fleets_View
  Fleets_Edit
  Gateways_View
  Gateways_Edit
  Users_View
  Users_Edit
  Cars_View
  Cars_Edit
  FleetWallet_View
  FleetWallet_Edit
  ProviderWallet_View
  ProviderWallet_Edit
  DriverWallet_View
  DriverWallet_Edit
  RiderWallet_View
  RiderWallet_Edit
}

type OperatorConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Operator!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type RegionDeleteResponse {
  id: ID
  name: String
  currency: String
  enabled: Boolean
  location: [[Point!]!]
}

type RegionConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Region!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type RegionAggregateGroupBy {
  id: ID
  currency: String
}

type RegionCountAggregate {
  id: Int
  currency: Int
}

type RegionSumAggregate {
  id: Float
}

type RegionAvgAggregate {
  id: Float
}

type RegionMinAggregate {
  id: ID
  currency: String
}

type RegionMaxAggregate {
  id: ID
  currency: String
}

type RegionAggregateResponse {
  groupBy: RegionAggregateGroupBy
  count: RegionCountAggregate
  sum: RegionSumAggregate
  avg: RegionAvgAggregate
  min: RegionMinAggregate
  max: RegionMaxAggregate
}

type ServiceCategory {
  id: ID!
  name: String!
  services(
    """Specify to filter the records returned."""
    filter: ServiceFilter = {}

    """Specify to sort results."""
    sorting: [ServiceSort!] = []
  ): [Service!]!
}

type ServiceDeleteResponse {
  id: ID
  name: String
  description: String
  personCapacity: Int
  categoryId: ID
  baseFare: Float
  roundingFactor: Float
  perHundredMeters: Float
  perMinuteDrive: Float
  perMinuteWait: Float
  prepayPercent: Float
  minimumFee: Float
  searchRadius: Int
  paymentMethod: ServicePaymentMethod
  cancellationTotalFee: Float
  cancellationDriverShare: Float
  providerSharePercent: Int
  providerShareFlat: Float
  twoWayAvailable: Boolean
  maximumDestinationDistance: Int
  timeMultipliers: [TimeMultiplier!]
  distanceMultipliers: [DistanceMultiplier!]
  mediaId: ID
}

type ServiceCategoryDeleteResponse {
  id: ID
  name: String
}

type TokenObject {
  token: String!
}

type MediaEdge {
  """The node containing the Media"""
  node: Media!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

input PointInput {
  lat: Float!
  lng: Float!
}

input DistanceMultiplierInput {
  distanceFrom: Float!
  distanceTo: Float!
  multiply: Float!
}

input TimeMultiplierInput {
  startTime: String!
  endTime: String!
  multiply: Float!
}

type Query {
  login(userName: String!, password: String!): TokenObject!
  me: Operator!
  service(
    """The id of the record to find."""
    id: ID!
  ): Service!
  services(
    """Specify to filter the records returned."""
    filter: ServiceFilter = {}

    """Specify to sort results."""
    sorting: [ServiceSort!] = []
  ): [Service!]!
  serviceCategory(
    """The id of the record to find."""
    id: ID!
  ): ServiceCategory!
  serviceCategories(
    """Specify to filter the records returned."""
    filter: ServiceCategoryFilter = {}

    """Specify to sort results."""
    sorting: [ServiceCategorySort!] = []
  ): [ServiceCategory!]!
  operatorRole(
    """The id of the record to find."""
    id: ID!
  ): OperatorRole!
  operatorRoles(
    """Specify to filter the records returned."""
    filter: OperatorRoleFilter = {}

    """Specify to sort results."""
    sorting: [OperatorRoleSort!] = []
  ): [OperatorRole!]!
  operator(
    """The id of the record to find."""
    id: ID!
  ): Operator!
  operators(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: OperatorFilter = {}

    """Specify to sort results."""
    sorting: [OperatorSort!] = []
  ): OperatorConnection!
  driverAggregate(
    """Filter to find records to aggregate on"""
    filter: DriverAggregateFilter
  ): [DriverAggregateResponse!]!
  driver(
    """The id of the record to find."""
    id: ID!
  ): Driver!
  drivers(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: DriverFilter = {}

    """Specify to sort results."""
    sorting: [DriverSort!] = []
  ): DriverConnection!
  driverWallet(
    """The id of the record to find."""
    id: ID!
  ): DriverWallet!
  driverWallets(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: DriverWalletFilter = {}

    """Specify to sort results."""
    sorting: [DriverWalletSort!] = []
  ): DriverWalletConnection!
  driverTransaction(
    """The id of the record to find."""
    id: ID!
  ): DriverTransaction!
  driverTransactions(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: DriverTransactionFilter = {}

    """Specify to sort results."""
    sorting: [DriverTransactionSort!] = []
  ): DriverTransactionConnection!
  regionAggregate(
    """Filter to find records to aggregate on"""
    filter: RegionAggregateFilter
  ): [RegionAggregateResponse!]!
  region(
    """The id of the record to find."""
    id: ID!
  ): Region!
  regions(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: RegionFilter = {}

    """Specify to sort results."""
    sorting: [RegionSort!] = []
  ): RegionConnection!
  carModel(
    """The id of the record to find."""
    id: ID!
  ): CarModel!
  carModels(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: CarModelFilter = {}

    """Specify to sort results."""
    sorting: [CarModelSort!] = []
  ): CarModelConnection!
  carColor(
    """The id of the record to find."""
    id: ID!
  ): CarColor!
  carColors(
    """Specify to filter the records returned."""
    filter: CarColorFilter = {}

    """Specify to sort results."""
    sorting: [CarColorSort!] = []
  ): [CarColor!]!
}

input ServiceCategoryFilter {
  and: [ServiceCategoryFilter!]
  or: [ServiceCategoryFilter!]
  id: IDFilterComparison
}

input ServiceCategorySort {
  field: ServiceCategorySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ServiceCategorySortFields {
  id
}

input OperatorRoleFilter {
  and: [OperatorRoleFilter!]
  or: [OperatorRoleFilter!]
  id: IDFilterComparison
}

input OperatorRoleSort {
  field: OperatorRoleSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OperatorRoleSortFields {
  id
}

input OperatorFilter {
  and: [OperatorFilter!]
  or: [OperatorFilter!]
  id: IDFilterComparison
}

input OperatorSort {
  field: OperatorSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OperatorSortFields {
  id
}

input DriverAggregateFilter {
  and: [DriverAggregateFilter!]
  or: [DriverAggregateFilter!]
  id: IDFilterComparison
  lastName: StringFieldComparison
  mobileNumber: StringFieldComparison
  status: DriverStatusFilterComparison
}

input DriverStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: DriverStatus
  neq: DriverStatus
  gt: DriverStatus
  gte: DriverStatus
  lt: DriverStatus
  lte: DriverStatus
  like: DriverStatus
  notLike: DriverStatus
  iLike: DriverStatus
  notILike: DriverStatus
  in: [DriverStatus!]
  notIn: [DriverStatus!]
}

input DriverFilter {
  and: [DriverFilter!]
  or: [DriverFilter!]
  id: IDFilterComparison
  lastName: StringFieldComparison
  mobileNumber: StringFieldComparison
  status: DriverStatusFilterComparison
}

input DriverSort {
  field: DriverSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum DriverSortFields {
  id
  lastName
  mobileNumber
  status
}

input RegionAggregateFilter {
  and: [RegionAggregateFilter!]
  or: [RegionAggregateFilter!]
  id: IDFilterComparison
  currency: StringFieldComparison
}

input CarModelFilter {
  and: [CarModelFilter!]
  or: [CarModelFilter!]
  id: IDFilterComparison
}

input CarModelSort {
  field: CarModelSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CarModelSortFields {
  id
}

input CarColorFilter {
  and: [CarColorFilter!]
  or: [CarColorFilter!]
  id: IDFilterComparison
}

input CarColorSort {
  field: CarColorSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CarColorSortFields {
  id
}

type Mutation {
  updatePassword(input: UpdatePasswordInput!): Operator!
  setMediaOnService(input: SetMediaOnServiceInput!): Service!
  setOptionsOnService(input: SetOptionsOnServiceInput!): Service!
  addRegionsToService(input: AddRegionsToServiceInput!): Service!
  setRegionsOnService(input: SetRegionsOnServiceInput!): Service!
  removeMediaFromService(input: RemoveMediaFromServiceInput!): Service!
  removeOptionsFromService(input: RemoveOptionsFromServiceInput!): Service!
  removeRegionsFromService(input: RemoveRegionsFromServiceInput!): Service!
  createOneService(input: CreateOneServiceInput!): Service!
  updateOneService(input: UpdateOneServiceInput!): Service!
  deleteOneService(input: DeleteOneServiceInput!): ServiceDeleteResponse!
  addServicesToServiceCategory(input: AddServicesToServiceCategoryInput!): ServiceCategory!
  setServicesOnServiceCategory(input: SetServicesOnServiceCategoryInput!): ServiceCategory!
  removeServicesFromServiceCategory(input: RemoveServicesFromServiceCategoryInput!): ServiceCategory!
  createOneServiceCategory(input: CreateOneServiceCategoryInput!): ServiceCategory!
  updateOneServiceCategory(input: UpdateOneServiceCategoryInput!): ServiceCategory!
  deleteOneServiceCategory(input: DeleteOneServiceCategoryInput!): ServiceCategoryDeleteResponse!
  createOneOperatorRole(input: CreateOneOperatorRoleInput!): OperatorRole!
  updateOneOperatorRole(input: UpdateOneOperatorRoleInput!): OperatorRole!
  createOneOperator(input: CreateOneOperatorInput!): Operator!
  updateOneOperator(input: UpdateOneOperatorInput!): Operator!
  setMediaOnDriver(input: SetMediaOnDriverInput!): Driver!
  addWalletsToDriver(input: AddWalletsToDriverInput!): Driver!
  setWalletsOnDriver(input: SetWalletsOnDriverInput!): Driver!
  addEnabledServicesToDriver(input: AddEnabledServicesToDriverInput!): Driver!
  setEnabledServicesOnDriver(input: SetEnabledServicesOnDriverInput!): Driver!
  addDocumentsToDriver(input: AddDocumentsToDriverInput!): Driver!
  setDocumentsOnDriver(input: SetDocumentsOnDriverInput!): Driver!
  addTransactionsToDriver(input: AddTransactionsToDriverInput!): Driver!
  setTransactionsOnDriver(input: SetTransactionsOnDriverInput!): Driver!
  removeMediaFromDriver(input: RemoveMediaFromDriverInput!): Driver!
  removeWalletsFromDriver(input: RemoveWalletsFromDriverInput!): Driver!
  removeEnabledServicesFromDriver(input: RemoveEnabledServicesFromDriverInput!): Driver!
  removeDocumentsFromDriver(input: RemoveDocumentsFromDriverInput!): Driver!
  removeTransactionsFromDriver(input: RemoveTransactionsFromDriverInput!): Driver!
  createOneDriver(input: CreateOneDriverInput!): Driver!
  updateOneDriver(input: UpdateOneDriverInput!): Driver!
  setDriverOnDriverWallet(input: SetDriverOnDriverWalletInput!): DriverWallet!
  removeDriverFromDriverWallet(input: RemoveDriverFromDriverWalletInput!): DriverWallet!
  setOperatorOnDriverTransaction(input: SetOperatorOnDriverTransactionInput!): DriverTransaction!
  removeOperatorFromDriverTransaction(input: RemoveOperatorFromDriverTransactionInput!): DriverTransaction!
  createOneDriverTransaction(input: CreateOneDriverTransactionInput!): DriverTransaction!
  createOneRegion(input: CreateOneRegionInput!): Region!
  updateOneRegion(input: UpdateOneRegionInput!): Region!
  deleteOneRegion(input: DeleteOneRegionInput!): RegionDeleteResponse!
  createOneCarModel(input: CreateOneCarModelInput!): CarModel!
  updateOneCarModel(input: UpdateOneCarModelInput!): CarModel!
  deleteOneCarModel(input: DeleteOneCarModelInput!): CarModelDeleteResponse!
  createOneCarColor(input: CreateOneCarColorInput!): CarColor!
  updateOneCarColor(input: UpdateOneCarColorInput!): CarColor!
  deleteOneCarColor(input: DeleteOneCarColorInput!): CarColorDeleteResponse!
}

input UpdatePasswordInput {
  oldPassword: String!
  newPasswod: String!
}

input SetMediaOnServiceInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetOptionsOnServiceInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input AddRegionsToServiceInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetRegionsOnServiceInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveMediaFromServiceInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveOptionsFromServiceInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveRegionsFromServiceInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneServiceInput {
  """The record to create"""
  service: CreateService!
}

input CreateService {
  id: ID
  name: String
  description: String
  personCapacity: Int
  categoryId: ID
  baseFare: Float
  roundingFactor: Float
  perHundredMeters: Float
  perMinuteDrive: Float
  perMinuteWait: Float
  prepayPercent: Float
  minimumFee: Float
  searchRadius: Int
  paymentMethod: ServicePaymentMethod
  cancellationTotalFee: Float
  cancellationDriverShare: Float
  providerSharePercent: Int
  providerShareFlat: Float
  twoWayAvailable: Boolean
  maximumDestinationDistance: Int
  timeMultipliers: [TimeMultiplierInput!]
  distanceMultipliers: [DistanceMultiplierInput!]
  mediaId: ID
}

input UpdateOneServiceInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateService!
}

input UpdateService {
  id: ID
  name: String
  description: String
  personCapacity: Int
  categoryId: ID
  baseFare: Float
  roundingFactor: Float
  perHundredMeters: Float
  perMinuteDrive: Float
  perMinuteWait: Float
  prepayPercent: Float
  minimumFee: Float
  searchRadius: Int
  paymentMethod: ServicePaymentMethod
  cancellationTotalFee: Float
  cancellationDriverShare: Float
  providerSharePercent: Int
  providerShareFlat: Float
  twoWayAvailable: Boolean
  maximumDestinationDistance: Int
  timeMultipliers: [TimeMultiplierInput!]
  distanceMultipliers: [DistanceMultiplierInput!]
  mediaId: ID
}

input DeleteOneServiceInput {
  """The id of the record to delete."""
  id: ID!
}

input AddServicesToServiceCategoryInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetServicesOnServiceCategoryInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveServicesFromServiceCategoryInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneServiceCategoryInput {
  """The record to create"""
  serviceCategory: CreateServiceCategory!
}

input CreateServiceCategory {
  id: ID
  name: String
}

input UpdateOneServiceCategoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateServiceCategory!
}

input UpdateServiceCategory {
  id: ID
  name: String
}

input DeleteOneServiceCategoryInput {
  """The id of the record to delete."""
  id: ID!
}

input CreateOneOperatorRoleInput {
  """The record to create"""
  operatorRole: CreateOperatorRole!
}

input CreateOperatorRole {
  id: ID
  title: String
  permissions: [OperatorPermission!]
}

input UpdateOneOperatorRoleInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOperatorRole!
}

input UpdateOperatorRole {
  id: ID
  title: String
  permissions: [OperatorPermission!]
}

input CreateOneOperatorInput {
  """The record to create"""
  operator: CreateOperatorInput!
}

input CreateOperatorInput {
  firstName: String!
  lastName: String!
  userName: String!
  password: String!
  mobileNumber: String!
  email: String!
  roleId: ID!
}

input UpdateOneOperatorInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOperator!
}

input UpdateOperator {
  id: ID
  firstName: String
  lastName: String
  userName: String
  mobileNumber: String
  email: String
  roleId: ID
}

input SetMediaOnDriverInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input AddWalletsToDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetWalletsOnDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddEnabledServicesToDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetEnabledServicesOnDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddDocumentsToDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetDocumentsOnDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddTransactionsToDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetTransactionsOnDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveMediaFromDriverInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveWalletsFromDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveEnabledServicesFromDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveDocumentsFromDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveTransactionsFromDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneDriverInput {
  """The record to create"""
  driver: CreateDriver!
}

input CreateDriver {
  id: ID
  firstName: String
  lastName: String
  mobileNumber: String
  certificateNumber: String
  email: String
  carProductionYear: Int
  carId: ID
  carColorId: ID
  carPlate: String
  status: DriverStatus
  gender: Gender
  rating: Int
  reviewCount: Int
  registrationTimestamp: DateTime
  lastSeenTimestamp: DateTime
  accountNumber: String
  bankName: String
  bankRoutingNumber: String
  bankSwift: String
  address: String
  softRejectionNote: String
  mediaId: ID
}

input UpdateOneDriverInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDriverInput!
}

input UpdateDriverInput {
  carId: ID!
  carColorId: ID!
  firstName: String!
  lastName: String!
  certificateNumber: String!
  email: String!
  carProductionYear: Int!
  carPlate: String!
  status: DriverStatus!
  gender: Gender!
  accountNumber: String!
  bankName: String!
  bankRoutingNumber: String!
  bankSwift: String!
  address: String!
  softRejectionNote: String!
  mediaId: ID!
}

input SetDriverOnDriverWalletInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveDriverFromDriverWalletInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetOperatorOnDriverTransactionInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveOperatorFromDriverTransactionInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOneDriverTransactionInput {
  """The record to create"""
  driverTransaction: CreateDriverTransaction!
}

input CreateDriverTransaction {
  createdAt: DateTime
  action: TransactionAction
  status: TransactionStatus
  deductType: DriverDeductTransactionType
  rechargeType: DriverRechargeTransactionType
  amount: Float
  currency: String
  refrenceNumber: String
  driverId: ID
  paymentGatewayId: ID
  operatorId: ID
  requestId: ID
  description: String
}

input CreateOneRegionInput {
  """The record to create"""
  region: CreateRegion!
}

input CreateRegion {
  id: ID
  name: String
  currency: String
  enabled: Boolean
  location: [[PointInput!]!]
}

input UpdateOneRegionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRegion!
}

input UpdateRegion {
  id: ID
  name: String
  currency: String
  enabled: Boolean
  location: [[PointInput!]!]
}

input DeleteOneRegionInput {
  """The id of the record to delete."""
  id: ID!
}

input CreateOneCarModelInput {
  """The record to create"""
  carModel: CreateCarModel!
}

input CreateCarModel {
  id: ID
  name: String
}

input UpdateOneCarModelInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCarModel!
}

input UpdateCarModel {
  id: ID
  name: String
}

input DeleteOneCarModelInput {
  """The id of the record to delete."""
  id: ID!
}

input CreateOneCarColorInput {
  """The record to create"""
  carColor: CreateCarColor!
}

input CreateCarColor {
  id: ID
  name: String
}

input UpdateOneCarColorInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCarColor!
}

input UpdateCarColor {
  id: ID
  name: String
}

input DeleteOneCarColorInput {
  """The id of the record to delete."""
  id: ID!
}