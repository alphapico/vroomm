# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Point {
  lat: Float!
  lng: Float!
}

type DistanceMultiplier {
  distanceFrom: Float!
  distanceTo: Float!
  multiply: Float!
}

type TimeMultiplier {
  startTime: String!
  endTime: String!
  multiply: Float!
}

type Address {
  id: ID!
  title: String!
  details: String
  location: Point!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type AddressEdge {
  """The node containing the Address"""
  node: Address!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type AddressConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [AddressEdge!]!
}

type Announcement {
  id: ID!
  title: String!
  description: String!
  url: String
  startAt: DateTime!
  expireAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AnnouncementDeleteResponse {
  id: ID
  title: String
  description: String
  url: String
  startAt: DateTime
  expireAt: DateTime
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

type AnnouncementConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Announcement!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type CarColor {
  id: ID!
  name: String!
}

type CarModel {
  id: ID!
  name: String!
}

type CarModelDeleteResponse {
  id: ID
  name: String
}

type CarModelConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [CarModel!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type CarColorDeleteResponse {
  id: ID
  name: String
}

type Region {
  id: ID!
  name: String!
  currency: String!
  enabled: Boolean!
  location: [[Point!]!]!
}

type Media {
  id: ID!
  address: String!
  base64: String
}

type ServiceOption {
  id: ID!
  name: String!
  type: ServiceOptionType!
  additionalFee: Float
  icon: ServiceOptionIcon!
  serviceId: ID!
}

enum ServiceOptionType {
  Free
  Paid
  TwoWay
}

enum ServiceOptionIcon {
  Pet
  TwoWay
  Luggage
  PackageDelivery
  Shopping
  Custom1
  Custom2
  Custom3
  Custom4
  Custom5
}

type Service {
  id: ID!
  name: String!
  description: String
  personCapacity: Int
  categoryId: ID!
  baseFare: Float!
  roundingFactor: Float
  perHundredMeters: Float!
  perMinuteDrive: Float!
  perMinuteWait: Float!
  prepayPercent: Float!
  minimumFee: Float!
  searchRadius: Int!
  paymentMethod: ServicePaymentMethod!
  cancellationTotalFee: Float!
  cancellationDriverShare: Float!
  providerSharePercent: Int!
  providerShareFlat: Float!
  twoWayAvailable: Boolean!
  maximumDestinationDistance: Int!
  timeMultipliers: [TimeMultiplier!]!
  distanceMultipliers: [DistanceMultiplier!]!
  mediaId: ID!
  media: Media!
  options: ServiceOption!
  regions(
    """Specify to filter the records returned."""
    filter: RegionFilter = {}

    """Specify to sort results."""
    sorting: [RegionSort!] = []
  ): [Region!]!
}

enum ServicePaymentMethod {
  CashCredit
  OnlyCredit
  OnlyCash
}

input RegionFilter {
  and: [RegionFilter!]
  or: [RegionFilter!]
  id: IDFilterComparison
  currency: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input RegionSort {
  field: RegionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum RegionSortFields {
  id
  currency
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type Coupon {
  id: ID!
  code: String!
  title: String!
  description: String!
  manyUsersCanUse: Int!
  manyTimesUserCanUse: Int!
  minimumCost: Float!
  maximumCost: Float!
  startAt: DateTime!
  expireAt: DateTime!
  discountPercent: Int!
  discountFlat: Int!
  creditGift: Float!
  isEnabled: Boolean!
  isFirstTravelOnly: Boolean!
  allowedServices(
    """Specify to filter the records returned."""
    filter: ServiceFilter = {}

    """Specify to sort results."""
    sorting: [ServiceSort!] = []
  ): [Service!]!
}

input ServiceFilter {
  and: [ServiceFilter!]
  or: [ServiceFilter!]
  id: IDFilterComparison
  categoryId: IDFilterComparison
}

input ServiceSort {
  field: ServiceSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ServiceSortFields {
  id
  categoryId
}

type CouponConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Coupon!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type OnlineDriver {
  location: Point!
  driverId: ID!
  lastUpdatedAt: Float!
}

type OnlineDriverWithData {
  id: ID!
  location: Point!
  lastUpdatedAt: Float!
  firstName: String
  lastName: String
  mobileNumber: String!
  status: DriverStatus!
  gender: Gender
  rating: Int
  reviewCount: Int!
}

enum DriverStatus {
  Online
  Offline
  Blocked
  InService
  WaitingDocuments
  PendingApproval
  SoftReject
  HardReject
}

enum Gender {
  Male
  Female
  Unknown
}

type Operator {
  id: ID!
  firstName: String
  lastName: String
  userName: String!
  mobileNumber: String
  email: String
  roleId: ID
}

type DriverTransaction {
  createdAt: DateTime!
  action: TransactionAction!
  status: TransactionStatus!
  deductType: DriverDeductTransactionType
  rechargeType: DriverRechargeTransactionType
  amount: Float!
  currency: String!
  refrenceNumber: String
  driverId: ID!
  paymentGatewayId: ID
  operatorId: ID
  orderId: ID
  description: String
  operator: Operator
}

enum TransactionAction {
  Recharge
  Deduct
}

enum TransactionStatus {
  Processing
  Done
  Canceled
  Rejected
}

enum DriverDeductTransactionType {
  Withdraw
  Commission
  Correction
}

enum DriverRechargeTransactionType {
  OrderFee
  BankTransfer
  InAppPayment
  Gift
}

type FeedbackParameter {
  id: ID!
  title: String!
  isGood: Boolean!
}

type Feedback {
  id: ID!
  score: Int!
  reviewTimestamp: DateTime!
  description: String
  driverId: ID!
  orderId: ID!
  parametersAggregate(
    """Filter to find records to aggregate on"""
    filter: FeedbackParameterAggregateFilter
  ): [FeedbackParametersAggregateResponse!]!
  parameters(
    """Specify to filter the records returned."""
    filter: FeedbackParameterFilter = {}

    """Specify to sort results."""
    sorting: [FeedbackParameterSort!] = []
  ): [FeedbackParameter!]!
}

input FeedbackParameterAggregateFilter {
  and: [FeedbackParameterAggregateFilter!]
  or: [FeedbackParameterAggregateFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  isGood: BooleanFieldComparison
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input FeedbackParameterFilter {
  and: [FeedbackParameterFilter!]
  or: [FeedbackParameterFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  isGood: BooleanFieldComparison
}

input FeedbackParameterSort {
  field: FeedbackParameterSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum FeedbackParameterSortFields {
  id
  title
  isGood
}

type Driver {
  id: ID!
  firstName: String
  lastName: String
  mobileNumber: String!
  certificateNumber: String
  email: String
  carProductionYear: Int
  carId: ID
  carColorId: ID
  carPlate: String
  status: DriverStatus!
  gender: Gender
  rating: Int
  reviewCount: Int!
  registrationTimestamp: DateTime!
  lastSeenTimestamp: DateTime
  accountNumber: String
  bankName: String
  bankRoutingNumber: String
  bankSwift: String
  address: String
  softRejectionNote: String
  mediaId: ID
  feedbacksAggregate(
    """Filter to find records to aggregate on"""
    filter: FeedbackAggregateFilter
  ): [DriverFeedbacksAggregateResponse!]!
  walletsAggregate(
    """Filter to find records to aggregate on"""
    filter: DriverWalletAggregateFilter
  ): [DriverWalletsAggregateResponse!]!
  enabledServicesAggregate(
    """Filter to find records to aggregate on"""
    filter: ServiceAggregateFilter
  ): [DriverEnabledServicesAggregateResponse!]!
  documentsAggregate(
    """Filter to find records to aggregate on"""
    filter: MediaAggregateFilter
  ): [DriverDocumentsAggregateResponse!]!
  transactionsAggregate(
    """Filter to find records to aggregate on"""
    filter: DriverTransactionAggregateFilter
  ): [DriverTransactionsAggregateResponse!]!
  media: Media
  feedbacks(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: FeedbackFilter = {}

    """Specify to sort results."""
    sorting: [FeedbackSort!] = []
  ): DriverFeedbacksConnection!
  wallets(
    """Specify to filter the records returned."""
    filter: DriverWalletFilter = {}

    """Specify to sort results."""
    sorting: [DriverWalletSort!] = []
  ): [DriverWallet!]!
  enabledServices(
    """Specify to filter the records returned."""
    filter: ServiceFilter = {}

    """Specify to sort results."""
    sorting: [ServiceSort!] = []
  ): [Service!]!
  documents(
    """Specify to filter the records returned."""
    filter: MediaFilter = {}

    """Specify to sort results."""
    sorting: [MediaSort!] = []
  ): [Media!]!
  transactions(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: DriverTransactionFilter = {}

    """Specify to sort results."""
    sorting: [DriverTransactionSort!] = []
  ): DriverTransactionsConnection!
}

input FeedbackAggregateFilter {
  and: [FeedbackAggregateFilter!]
  or: [FeedbackAggregateFilter!]
  id: IDFilterComparison
  driverId: IDFilterComparison
  orderId: IDFilterComparison
}

input DriverWalletAggregateFilter {
  and: [DriverWalletAggregateFilter!]
  or: [DriverWalletAggregateFilter!]
  id: IDFilterComparison
  balance: FloatFieldComparison
  currency: StringFieldComparison
  driverId: IDFilterComparison
}

input FloatFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: FloatFieldComparisonBetween
  notBetween: FloatFieldComparisonBetween
}

input FloatFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input ServiceAggregateFilter {
  and: [ServiceAggregateFilter!]
  or: [ServiceAggregateFilter!]
  id: IDFilterComparison
  categoryId: IDFilterComparison
}

input MediaAggregateFilter {
  and: [MediaAggregateFilter!]
  or: [MediaAggregateFilter!]
  id: IDFilterComparison
}

input DriverTransactionAggregateFilter {
  and: [DriverTransactionAggregateFilter!]
  or: [DriverTransactionAggregateFilter!]
  createdAt: DateFieldComparison
  driverId: IDFilterComparison
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

input FeedbackFilter {
  and: [FeedbackFilter!]
  or: [FeedbackFilter!]
  id: IDFilterComparison
  driverId: IDFilterComparison
  orderId: IDFilterComparison
}

input FeedbackSort {
  field: FeedbackSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum FeedbackSortFields {
  id
  driverId
  orderId
}

input DriverWalletFilter {
  and: [DriverWalletFilter!]
  or: [DriverWalletFilter!]
  id: IDFilterComparison
  balance: FloatFieldComparison
  currency: StringFieldComparison
  driverId: IDFilterComparison
}

input DriverWalletSort {
  field: DriverWalletSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum DriverWalletSortFields {
  id
  balance
  currency
  driverId
}

input MediaFilter {
  and: [MediaFilter!]
  or: [MediaFilter!]
  id: IDFilterComparison
}

input MediaSort {
  field: MediaSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum MediaSortFields {
  id
}

input DriverTransactionFilter {
  and: [DriverTransactionFilter!]
  or: [DriverTransactionFilter!]
  createdAt: DateFieldComparison
  driverId: IDFilterComparison
}

input DriverTransactionSort {
  field: DriverTransactionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum DriverTransactionSortFields {
  createdAt
  driverId
}

type DriverWallet {
  id: ID!
  balance: Float!
  currency: String!
  driverId: ID!
  driver: Driver!
}

type DriverConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Driver!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type DriverAggregateGroupBy {
  id: ID
  lastName: String
  mobileNumber: String
  status: DriverStatus
}

type DriverCountAggregate {
  id: Int
  lastName: Int
  mobileNumber: Int
  status: Int
}

type DriverSumAggregate {
  id: Float
}

type DriverAvgAggregate {
  id: Float
}

type DriverMinAggregate {
  id: ID
  lastName: String
  mobileNumber: String
  status: DriverStatus
}

type DriverMaxAggregate {
  id: ID
  lastName: String
  mobileNumber: String
  status: DriverStatus
}

type DriverAggregateResponse {
  groupBy: DriverAggregateGroupBy
  count: DriverCountAggregate
  sum: DriverSumAggregate
  avg: DriverAvgAggregate
  min: DriverMinAggregate
  max: DriverMaxAggregate
}

type DriverTransactionsConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [DriverTransaction!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type DriverFeedbacksConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Feedback!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type DriverTransactionsAggregateGroupBy {
  createdAt: DateTime
  driverId: ID
}

type DriverTransactionsCountAggregate {
  createdAt: Int
  driverId: Int
}

type DriverTransactionsSumAggregate {
  driverId: Float
}

type DriverTransactionsAvgAggregate {
  driverId: Float
}

type DriverTransactionsMinAggregate {
  createdAt: DateTime
  driverId: ID
}

type DriverTransactionsMaxAggregate {
  createdAt: DateTime
  driverId: ID
}

type DriverTransactionsAggregateResponse {
  groupBy: DriverTransactionsAggregateGroupBy
  count: DriverTransactionsCountAggregate
  sum: DriverTransactionsSumAggregate
  avg: DriverTransactionsAvgAggregate
  min: DriverTransactionsMinAggregate
  max: DriverTransactionsMaxAggregate
}

type DriverDocumentsAggregateGroupBy {
  id: ID
}

type DriverDocumentsCountAggregate {
  id: Int
}

type DriverDocumentsSumAggregate {
  id: Float
}

type DriverDocumentsAvgAggregate {
  id: Float
}

type DriverDocumentsMinAggregate {
  id: ID
}

type DriverDocumentsMaxAggregate {
  id: ID
}

type DriverDocumentsAggregateResponse {
  groupBy: DriverDocumentsAggregateGroupBy
  count: DriverDocumentsCountAggregate
  sum: DriverDocumentsSumAggregate
  avg: DriverDocumentsAvgAggregate
  min: DriverDocumentsMinAggregate
  max: DriverDocumentsMaxAggregate
}

type DriverEnabledServicesAggregateGroupBy {
  id: ID
  categoryId: ID
}

type DriverEnabledServicesCountAggregate {
  id: Int
  categoryId: Int
}

type DriverEnabledServicesSumAggregate {
  id: Float
  categoryId: Float
}

type DriverEnabledServicesAvgAggregate {
  id: Float
  categoryId: Float
}

type DriverEnabledServicesMinAggregate {
  id: ID
  categoryId: ID
}

type DriverEnabledServicesMaxAggregate {
  id: ID
  categoryId: ID
}

type DriverEnabledServicesAggregateResponse {
  groupBy: DriverEnabledServicesAggregateGroupBy
  count: DriverEnabledServicesCountAggregate
  sum: DriverEnabledServicesSumAggregate
  avg: DriverEnabledServicesAvgAggregate
  min: DriverEnabledServicesMinAggregate
  max: DriverEnabledServicesMaxAggregate
}

type DriverWalletsAggregateGroupBy {
  id: ID
  balance: Float
  currency: String
  driverId: ID
}

type DriverWalletsCountAggregate {
  id: Int
  balance: Int
  currency: Int
  driverId: Int
}

type DriverWalletsSumAggregate {
  id: Float
  balance: Float
  driverId: Float
}

type DriverWalletsAvgAggregate {
  id: Float
  balance: Float
  driverId: Float
}

type DriverWalletsMinAggregate {
  id: ID
  balance: Float
  currency: String
  driverId: ID
}

type DriverWalletsMaxAggregate {
  id: ID
  balance: Float
  currency: String
  driverId: ID
}

type DriverWalletsAggregateResponse {
  groupBy: DriverWalletsAggregateGroupBy
  count: DriverWalletsCountAggregate
  sum: DriverWalletsSumAggregate
  avg: DriverWalletsAvgAggregate
  min: DriverWalletsMinAggregate
  max: DriverWalletsMaxAggregate
}

type DriverFeedbacksAggregateGroupBy {
  id: ID
  driverId: ID
  orderId: ID
}

type DriverFeedbacksCountAggregate {
  id: Int
  driverId: Int
  orderId: Int
}

type DriverFeedbacksSumAggregate {
  id: Float
  driverId: Float
  orderId: Float
}

type DriverFeedbacksAvgAggregate {
  id: Float
  driverId: Float
  orderId: Float
}

type DriverFeedbacksMinAggregate {
  id: ID
  driverId: ID
  orderId: ID
}

type DriverFeedbacksMaxAggregate {
  id: ID
  driverId: ID
  orderId: ID
}

type DriverFeedbacksAggregateResponse {
  groupBy: DriverFeedbacksAggregateGroupBy
  count: DriverFeedbacksCountAggregate
  sum: DriverFeedbacksSumAggregate
  avg: DriverFeedbacksAvgAggregate
  min: DriverFeedbacksMinAggregate
  max: DriverFeedbacksMaxAggregate
}

type DriverWalletConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [DriverWallet!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type DriverTransactionConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [DriverTransaction!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type FeedbackConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Feedback!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type FeedbackParametersAggregateGroupBy {
  id: ID
  title: String
  isGood: Boolean
}

type FeedbackParametersCountAggregate {
  id: Int
  title: Int
  isGood: Int
}

type FeedbackParametersSumAggregate {
  id: Float
}

type FeedbackParametersAvgAggregate {
  id: Float
}

type FeedbackParametersMinAggregate {
  id: ID
  title: String
}

type FeedbackParametersMaxAggregate {
  id: ID
  title: String
}

type FeedbackParametersAggregateResponse {
  groupBy: FeedbackParametersAggregateGroupBy
  count: FeedbackParametersCountAggregate
  sum: FeedbackParametersSumAggregate
  avg: FeedbackParametersAvgAggregate
  min: FeedbackParametersMinAggregate
  max: FeedbackParametersMaxAggregate
}

type FeedbackParameterDeleteResponse {
  id: ID
  title: String
  isGood: Boolean
}

type OperatorRole {
  id: ID!
  title: String!
  permissions: [OperatorPermission!]!
}

enum OperatorPermission {
  Drivers_View
  Drivers_Edit
  Passengers_View
  Passengers_Edit
  Regions_View
  Regions_Edit
  Services_View
  Services_Edit
  Complaints_View
  Complaints_Edit
  Coupons_View
  Coupons_Edit
  Announcements_View
  Announcements_Edit
  Requests_View
  Fleets_View
  Fleets_Edit
  Gateways_View
  Gateways_Edit
  Users_View
  Users_Edit
  Cars_View
  Cars_Edit
  FleetWallet_View
  FleetWallet_Edit
  ProviderWallet_View
  ProviderWallet_Edit
  DriverWallet_View
  DriverWallet_Edit
  PassengerWallet_View
  PassengerWallet_Edit
}

type OperatorConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Operator!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ServiceWithCost {
  id: ID!
  name: String!
  cost: Float!
  media: Media!
}

type ServiceCategoryWithCost {
  id: ID!
  name: String!
  services: ServiceWithCost!
}

type CalculateFareDTO {
  currency: String!
  distance: Float!
  duration: Float!
  services: [ServiceCategoryWithCost!]!
  error: CalculateFareError
}

enum CalculateFareError {
  RegionUnsupported
  NoServiceInRegion
}

type ComplaintActivity {
  id: ID!
  type: ComplaintActivityType!
  comment: String
  complaintId: ID!
  actor: Operator!
  assignedTo: Operator
}

enum ComplaintActivityType {
  AssignToOperator
  Update
  Resolved
}

type Complaint {
  id: ID!
  inscriptionTimestamp: DateTime!
  requestedByDriver: Boolean!
  subject: String!
  content: String
  status: ComplaintStatus!
  orderId: ID!
  activitiesAggregate(
    """Filter to find records to aggregate on"""
    filter: ComplaintActivityAggregateFilter
  ): [ComplaintActivitiesAggregateResponse!]!
  order: Order!
  activities(
    """Specify to filter the records returned."""
    filter: ComplaintActivityFilter = {}

    """Specify to sort results."""
    sorting: [ComplaintActivitySort!] = []
  ): [ComplaintActivity!]!
}

enum ComplaintStatus {
  Submitted
  UnderInvestigation
  Resolved
}

input ComplaintActivityAggregateFilter {
  and: [ComplaintActivityAggregateFilter!]
  or: [ComplaintActivityAggregateFilter!]
  id: IDFilterComparison
  complaintId: IDFilterComparison
}

input ComplaintActivityFilter {
  and: [ComplaintActivityFilter!]
  or: [ComplaintActivityFilter!]
  id: IDFilterComparison
  complaintId: IDFilterComparison
}

input ComplaintActivitySort {
  field: ComplaintActivitySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ComplaintActivitySortFields {
  id
  complaintId
}

type PassengerAddress {
  id: ID!
  type: PassengerAddressType!
  title: String!
  details: String
  location: Point!
  passengerId: ID!
}

enum PassengerAddressType {
  Home
  Work
  Partner
  Gym
  Parent
  Cafe
  Park
  Other
}

type PassengerWallet {
  id: ID!
  balance: Float!
  currency: String!
  passengerId: ID!
  passenger: Passenger!
}

type Passenger {
  id: ID!
  status: PassengerStatus!
  firstName: String
  lastName: String
  mobileNumber: String!
  registrationTimestamp: DateTime!
  email: String
  gender: Gender
  isResident: Boolean
  idNumber: String
  media: Media
  addresses(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: PassengerAddressFilter = {}

    """Specify to sort results."""
    sorting: [PassengerAddressSort!] = []
  ): PassengerAddressesConnection!
  wallets(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: PassengerWalletFilter = {}

    """Specify to sort results."""
    sorting: [PassengerWalletSort!] = []
  ): PassengerWalletsConnection!
  transactions(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: PassengerTransactionFilter = {}

    """Specify to sort results."""
    sorting: [PassengerTransactionSort!] = []
  ): PassengerTransactionsConnection!
}

enum PassengerStatus {
  Enabled
  Disabled
}

input PassengerAddressFilter {
  and: [PassengerAddressFilter!]
  or: [PassengerAddressFilter!]
  id: IDFilterComparison
  passengerId: IDFilterComparison
}

input PassengerAddressSort {
  field: PassengerAddressSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PassengerAddressSortFields {
  id
  passengerId
}

input PassengerWalletFilter {
  and: [PassengerWalletFilter!]
  or: [PassengerWalletFilter!]
  id: IDFilterComparison
  balance: FloatFieldComparison
  passengerId: IDFilterComparison
}

input PassengerWalletSort {
  field: PassengerWalletSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PassengerWalletSortFields {
  id
  balance
  passengerId
}

input PassengerTransactionFilter {
  and: [PassengerTransactionFilter!]
  or: [PassengerTransactionFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  amount: FloatFieldComparison
  currency: StringFieldComparison
  passengerId: IDFilterComparison
}

input PassengerTransactionSort {
  field: PassengerTransactionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PassengerTransactionSortFields {
  id
  createdAt
  amount
  currency
  passengerId
}

type PassengerTransaction {
  id: ID!
  action: TransactionAction!
  createdAt: DateTime!
  deductType: PassengerDeductTransactionType
  rechargeType: PassengerRechargeTransactionType
  status: TransactionStatus!
  amount: Float!
  currency: String!
  refrenceNumber: String
  description: String
  passengerId: ID!
  operatorId: ID
  orderId: ID
  operator: Operator
  passenger: Passenger!
}

enum PassengerDeductTransactionType {
  OrderFee
  Withdraw
  Correction
}

enum PassengerRechargeTransactionType {
  BankTransfer
  Gift
  Correction
  InAppPayment
}

type OrderMessage {
  id: ID!
  sentAt: DateTime!
  sentByDriver: Boolean!
  status: MessageStatus!
  content: String!
}

enum MessageStatus {
  Sent
  Delivered
  Seen
}

type OrderActivity {
  id: ID!
  createdAt: DateTime!
  type: OrderActivityType!
}

enum OrderActivityType {
  RequestedByOperator
  BookedByOperator
  RequestedByPassenger
  BookedByPassenger
  DriverAccepted
  ArrivedToPickupPoint
  CanceledByDriver
  CanceledByPassenger
  CanceledByOperator
  Started
  ArrivedToDestination
  Paid
  Reviewed
  Expired
}

type Order {
  id: ID!
  createdOn: DateTime!
  startTimestamp: DateTime
  finishTimestamp: DateTime
  status: OrderStatus!
  distanceBest: Int!
  durationBest: Int!
  costBest: Float!
  costAfterCoupon: Float!
  currency: String!
  waitMinutes: Float!
  addresses: [String!]!
  points: [Point!]!
  expectedTimestamp: DateTime
  passengerId: ID!
  driverId: ID
  complaintsAggregate(
    """Filter to find records to aggregate on"""
    filter: ComplaintAggregateFilter
  ): [OrderComplaintsAggregateResponse!]!
  conversationsAggregate(
    """Filter to find records to aggregate on"""
    filter: OrderMessageAggregateFilter
  ): [OrderConversationsAggregateResponse!]!
  passengerTransactionsAggregate(
    """Filter to find records to aggregate on"""
    filter: PassengerTransactionAggregateFilter
  ): [OrderPassengerTransactionsAggregateResponse!]!
  driverTransactionsAggregate(
    """Filter to find records to aggregate on"""
    filter: DriverTransactionAggregateFilter
  ): [OrderDriverTransactionsAggregateResponse!]!
  activitiesAggregate(
    """Filter to find records to aggregate on"""
    filter: OrderActivityAggregateFilter
  ): [OrderActivitiesAggregateResponse!]!
  driver: Driver
  passenger: Passenger!
  service: Service!
  coupon: Coupon
  complaints(
    """Specify to filter the records returned."""
    filter: ComplaintFilter = {}

    """Specify to sort results."""
    sorting: [ComplaintSort!] = []
  ): [Complaint!]!
  conversations(
    """Specify to filter the records returned."""
    filter: OrderMessageFilter = {}

    """Specify to sort results."""
    sorting: [OrderMessageSort!] = []
  ): [OrderMessage!]!
  passengerTransactions(
    """Specify to filter the records returned."""
    filter: PassengerTransactionFilter = {}

    """Specify to sort results."""
    sorting: [PassengerTransactionSort!] = []
  ): [PassengerTransaction!]!
  driverTransactions(
    """Specify to filter the records returned."""
    filter: DriverTransactionFilter = {}

    """Specify to sort results."""
    sorting: [DriverTransactionSort!] = []
  ): [DriverTransaction!]!
  activities(
    """Specify to filter the records returned."""
    filter: OrderActivityFilter = {}

    """Specify to sort results."""
    sorting: [OrderActivitySort!] = []
  ): [OrderActivity!]!
}

enum OrderStatus {
  Requested
  NotFound
  NoCloseFound
  Found
  DriverAccepted
  Arrived
  WaitingForPrePay
  DriverCanceled
  PassengerCanceled
  Started
  WaitingForPostPay
  WaitingForReview
  Finished
  Booked
  Expired
}

input ComplaintAggregateFilter {
  and: [ComplaintAggregateFilter!]
  or: [ComplaintAggregateFilter!]
  id: IDFilterComparison
  status: ComplaintStatusFilterComparison
  orderId: IDFilterComparison
}

input ComplaintStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ComplaintStatus
  neq: ComplaintStatus
  gt: ComplaintStatus
  gte: ComplaintStatus
  lt: ComplaintStatus
  lte: ComplaintStatus
  like: ComplaintStatus
  notLike: ComplaintStatus
  iLike: ComplaintStatus
  notILike: ComplaintStatus
  in: [ComplaintStatus!]
  notIn: [ComplaintStatus!]
}

input OrderMessageAggregateFilter {
  and: [OrderMessageAggregateFilter!]
  or: [OrderMessageAggregateFilter!]
  id: IDFilterComparison
}

input PassengerTransactionAggregateFilter {
  and: [PassengerTransactionAggregateFilter!]
  or: [PassengerTransactionAggregateFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  amount: FloatFieldComparison
  currency: StringFieldComparison
  passengerId: IDFilterComparison
}

input OrderActivityAggregateFilter {
  and: [OrderActivityAggregateFilter!]
  or: [OrderActivityAggregateFilter!]
  id: IDFilterComparison
}

input ComplaintFilter {
  and: [ComplaintFilter!]
  or: [ComplaintFilter!]
  id: IDFilterComparison
  status: ComplaintStatusFilterComparison
  orderId: IDFilterComparison
}

input ComplaintSort {
  field: ComplaintSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ComplaintSortFields {
  id
  status
  orderId
}

input OrderMessageFilter {
  and: [OrderMessageFilter!]
  or: [OrderMessageFilter!]
  id: IDFilterComparison
}

input OrderMessageSort {
  field: OrderMessageSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OrderMessageSortFields {
  id
}

input OrderActivityFilter {
  and: [OrderActivityFilter!]
  or: [OrderActivityFilter!]
  id: IDFilterComparison
}

input OrderActivitySort {
  field: OrderActivitySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OrderActivitySortFields {
  id
}

type OrderConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Order!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type OrderAggregateGroupBy {
  id: ID
  createdOn: DateTime
  status: OrderStatus
  passengerId: ID
  driverId: ID
}

type OrderCountAggregate {
  id: Int
  createdOn: Int
  status: Int
  passengerId: Int
  driverId: Int
}

type OrderSumAggregate {
  id: Float
  passengerId: Float
  driverId: Float
}

type OrderAvgAggregate {
  id: Float
  passengerId: Float
  driverId: Float
}

type OrderMinAggregate {
  id: ID
  createdOn: DateTime
  status: OrderStatus
  passengerId: ID
  driverId: ID
}

type OrderMaxAggregate {
  id: ID
  createdOn: DateTime
  status: OrderStatus
  passengerId: ID
  driverId: ID
}

type OrderAggregateResponse {
  groupBy: OrderAggregateGroupBy
  count: OrderCountAggregate
  sum: OrderSumAggregate
  avg: OrderAvgAggregate
  min: OrderMinAggregate
  max: OrderMaxAggregate
}

type OrderActivitiesAggregateGroupBy {
  id: ID
}

type OrderActivitiesCountAggregate {
  id: Int
}

type OrderActivitiesSumAggregate {
  id: Float
}

type OrderActivitiesAvgAggregate {
  id: Float
}

type OrderActivitiesMinAggregate {
  id: ID
}

type OrderActivitiesMaxAggregate {
  id: ID
}

type OrderActivitiesAggregateResponse {
  groupBy: OrderActivitiesAggregateGroupBy
  count: OrderActivitiesCountAggregate
  sum: OrderActivitiesSumAggregate
  avg: OrderActivitiesAvgAggregate
  min: OrderActivitiesMinAggregate
  max: OrderActivitiesMaxAggregate
}

type OrderDriverTransactionsAggregateGroupBy {
  createdAt: DateTime
  driverId: ID
}

type OrderDriverTransactionsCountAggregate {
  createdAt: Int
  driverId: Int
}

type OrderDriverTransactionsSumAggregate {
  driverId: Float
}

type OrderDriverTransactionsAvgAggregate {
  driverId: Float
}

type OrderDriverTransactionsMinAggregate {
  createdAt: DateTime
  driverId: ID
}

type OrderDriverTransactionsMaxAggregate {
  createdAt: DateTime
  driverId: ID
}

type OrderDriverTransactionsAggregateResponse {
  groupBy: OrderDriverTransactionsAggregateGroupBy
  count: OrderDriverTransactionsCountAggregate
  sum: OrderDriverTransactionsSumAggregate
  avg: OrderDriverTransactionsAvgAggregate
  min: OrderDriverTransactionsMinAggregate
  max: OrderDriverTransactionsMaxAggregate
}

type OrderPassengerTransactionsAggregateGroupBy {
  id: ID
  createdAt: DateTime
  amount: Float
  currency: String
  passengerId: ID
}

type OrderPassengerTransactionsCountAggregate {
  id: Int
  createdAt: Int
  amount: Int
  currency: Int
  passengerId: Int
}

type OrderPassengerTransactionsSumAggregate {
  id: Float
  amount: Float
  passengerId: Float
}

type OrderPassengerTransactionsAvgAggregate {
  id: Float
  amount: Float
  passengerId: Float
}

type OrderPassengerTransactionsMinAggregate {
  id: ID
  createdAt: DateTime
  amount: Float
  currency: String
  passengerId: ID
}

type OrderPassengerTransactionsMaxAggregate {
  id: ID
  createdAt: DateTime
  amount: Float
  currency: String
  passengerId: ID
}

type OrderPassengerTransactionsAggregateResponse {
  groupBy: OrderPassengerTransactionsAggregateGroupBy
  count: OrderPassengerTransactionsCountAggregate
  sum: OrderPassengerTransactionsSumAggregate
  avg: OrderPassengerTransactionsAvgAggregate
  min: OrderPassengerTransactionsMinAggregate
  max: OrderPassengerTransactionsMaxAggregate
}

type OrderConversationsAggregateGroupBy {
  id: ID
}

type OrderConversationsCountAggregate {
  id: Int
}

type OrderConversationsSumAggregate {
  id: Float
}

type OrderConversationsAvgAggregate {
  id: Float
}

type OrderConversationsMinAggregate {
  id: ID
}

type OrderConversationsMaxAggregate {
  id: ID
}

type OrderConversationsAggregateResponse {
  groupBy: OrderConversationsAggregateGroupBy
  count: OrderConversationsCountAggregate
  sum: OrderConversationsSumAggregate
  avg: OrderConversationsAvgAggregate
  min: OrderConversationsMinAggregate
  max: OrderConversationsMaxAggregate
}

type OrderComplaintsAggregateGroupBy {
  id: ID
  status: ComplaintStatus
  orderId: ID
}

type OrderComplaintsCountAggregate {
  id: Int
  status: Int
  orderId: Int
}

type OrderComplaintsSumAggregate {
  id: Float
  orderId: Float
}

type OrderComplaintsAvgAggregate {
  id: Float
  orderId: Float
}

type OrderComplaintsMinAggregate {
  id: ID
  status: ComplaintStatus
  orderId: ID
}

type OrderComplaintsMaxAggregate {
  id: ID
  status: ComplaintStatus
  orderId: ID
}

type OrderComplaintsAggregateResponse {
  groupBy: OrderComplaintsAggregateGroupBy
  count: OrderComplaintsCountAggregate
  sum: OrderComplaintsSumAggregate
  avg: OrderComplaintsAvgAggregate
  min: OrderComplaintsMinAggregate
  max: OrderComplaintsMaxAggregate
}

type PaymentGateway {
  id: ID!
  enabled: Boolean!
  title: String!
  type: PaymentGatewayType!
  publicKey: String
  privateKey: String!
  merchantId: String
  saltKey: String
  mediaId: ID
  media: Media
}

enum PaymentGatewayType {
  Stripe
  BrainTree
  PayPal
  CustomLink
}

type PaymentGatewayConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [PaymentGateway!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type RegionDeleteResponse {
  id: ID
  name: String
  currency: String
  enabled: Boolean
  location: [[Point!]!]
}

type RegionConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Region!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type RegionAggregateGroupBy {
  id: ID
  currency: String
}

type RegionCountAggregate {
  id: Int
  currency: Int
}

type RegionSumAggregate {
  id: Float
}

type RegionAvgAggregate {
  id: Float
}

type RegionMinAggregate {
  id: ID
  currency: String
}

type RegionMaxAggregate {
  id: ID
  currency: String
}

type RegionAggregateResponse {
  groupBy: RegionAggregateGroupBy
  count: RegionCountAggregate
  sum: RegionSumAggregate
  avg: RegionAvgAggregate
  min: RegionMinAggregate
  max: RegionMaxAggregate
}

type PassengerConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Passenger!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type PassengerTransactionsConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [PassengerTransaction!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type PassengerWalletsConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [PassengerWallet!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type PassengerAddressesConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [PassengerAddress!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type PassengerWalletConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [PassengerWallet!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type PassengerTransactionConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [PassengerTransaction!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type PassengerAddressConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [PassengerAddress!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ServiceCategory {
  id: ID!
  name: String!
  services(
    """Specify to filter the records returned."""
    filter: ServiceFilter = {}

    """Specify to sort results."""
    sorting: [ServiceSort!] = []
  ): [Service!]!
}

type ServiceDeleteResponse {
  id: ID
  name: String
  description: String
  personCapacity: Int
  categoryId: ID
  baseFare: Float
  roundingFactor: Float
  perHundredMeters: Float
  perMinuteDrive: Float
  perMinuteWait: Float
  prepayPercent: Float
  minimumFee: Float
  searchRadius: Int
  paymentMethod: ServicePaymentMethod
  cancellationTotalFee: Float
  cancellationDriverShare: Float
  providerSharePercent: Int
  providerShareFlat: Float
  twoWayAvailable: Boolean
  maximumDestinationDistance: Int
  timeMultipliers: [TimeMultiplier!]
  distanceMultipliers: [DistanceMultiplier!]
  mediaId: ID
}

type ServiceCategoryDeleteResponse {
  id: ID
  name: String
}

type TokenObject {
  token: String!
}

type MediaEdge {
  """The node containing the Media"""
  node: Media!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type ComplaintConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Complaint!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ComplaintAggregateGroupBy {
  id: ID
  status: ComplaintStatus
  orderId: ID
}

type ComplaintCountAggregate {
  id: Int
  status: Int
  orderId: Int
}

type ComplaintSumAggregate {
  id: Float
  orderId: Float
}

type ComplaintAvgAggregate {
  id: Float
  orderId: Float
}

type ComplaintMinAggregate {
  id: ID
  status: ComplaintStatus
  orderId: ID
}

type ComplaintMaxAggregate {
  id: ID
  status: ComplaintStatus
  orderId: ID
}

type ComplaintAggregateResponse {
  groupBy: ComplaintAggregateGroupBy
  count: ComplaintCountAggregate
  sum: ComplaintSumAggregate
  avg: ComplaintAvgAggregate
  min: ComplaintMinAggregate
  max: ComplaintMaxAggregate
}

type ComplaintActivitiesAggregateGroupBy {
  id: ID
  complaintId: ID
}

type ComplaintActivitiesCountAggregate {
  id: Int
  complaintId: Int
}

type ComplaintActivitiesSumAggregate {
  id: Float
  complaintId: Float
}

type ComplaintActivitiesAvgAggregate {
  id: Float
  complaintId: Float
}

type ComplaintActivitiesMinAggregate {
  id: ID
  complaintId: ID
}

type ComplaintActivitiesMaxAggregate {
  id: ID
  complaintId: ID
}

type ComplaintActivitiesAggregateResponse {
  groupBy: ComplaintActivitiesAggregateGroupBy
  count: ComplaintActivitiesCountAggregate
  sum: ComplaintActivitiesSumAggregate
  avg: ComplaintActivitiesAvgAggregate
  min: ComplaintActivitiesMinAggregate
  max: ComplaintActivitiesMaxAggregate
}

input PointInput {
  lat: Float!
  lng: Float!
}

input DistanceMultiplierInput {
  distanceFrom: Float!
  distanceTo: Float!
  multiply: Float!
}

input TimeMultiplierInput {
  startTime: String!
  endTime: String!
  multiply: Float!
}

type Query {
  getDriversLocation(center: PointInput!, count: Int!): [OnlineDriver!]!
  getDriversLocationWithData(center: PointInput!, count: Int!): [OnlineDriverWithData!]!
  calculateFare(input: CalculateFareInput!): CalculateFareDTO!
  login(userName: String!, password: String!): TokenObject!
  me: Operator!
  service(
    """The id of the record to find."""
    id: ID!
  ): Service!
  services(
    """Specify to filter the records returned."""
    filter: ServiceFilter = {}

    """Specify to sort results."""
    sorting: [ServiceSort!] = []
  ): [Service!]!
  serviceCategory(
    """The id of the record to find."""
    id: ID!
  ): ServiceCategory!
  serviceCategories(
    """Specify to filter the records returned."""
    filter: ServiceCategoryFilter = {}

    """Specify to sort results."""
    sorting: [ServiceCategorySort!] = []
  ): [ServiceCategory!]!
  operatorRole(
    """The id of the record to find."""
    id: ID!
  ): OperatorRole!
  operatorRoles(
    """Specify to filter the records returned."""
    filter: OperatorRoleFilter = {}

    """Specify to sort results."""
    sorting: [OperatorRoleSort!] = []
  ): [OperatorRole!]!
  operator(
    """The id of the record to find."""
    id: ID!
  ): Operator!
  operators(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: OperatorFilter = {}

    """Specify to sort results."""
    sorting: [OperatorSort!] = []
  ): OperatorConnection!
  passenger(
    """The id of the record to find."""
    id: ID!
  ): Passenger!
  passengers(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: PassengerFilter = {}

    """Specify to sort results."""
    sorting: [PassengerSort!] = []
  ): PassengerConnection!
  passengerWallet(
    """The id of the record to find."""
    id: ID!
  ): PassengerWallet!
  passengerWallets(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: PassengerWalletFilter = {}

    """Specify to sort results."""
    sorting: [PassengerWalletSort!] = []
  ): PassengerWalletConnection!
  passengerTransaction(
    """The id of the record to find."""
    id: ID!
  ): PassengerTransaction!
  passengerTransactions(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: PassengerTransactionFilter = {}

    """Specify to sort results."""
    sorting: [PassengerTransactionSort!] = []
  ): PassengerTransactionConnection!
  passengerAddress(
    """The id of the record to find."""
    id: ID!
  ): PassengerAddress!
  passengerAddresses(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: PassengerAddressFilter = {}

    """Specify to sort results."""
    sorting: [PassengerAddressSort!] = []
  ): PassengerAddressConnection!
  driverAggregate(
    """Filter to find records to aggregate on"""
    filter: DriverAggregateFilter
  ): [DriverAggregateResponse!]!
  driver(
    """The id of the record to find."""
    id: ID!
  ): Driver!
  drivers(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: DriverFilter = {}

    """Specify to sort results."""
    sorting: [DriverSort!] = []
  ): DriverConnection!
  driverWallet(
    """The id of the record to find."""
    id: ID!
  ): DriverWallet!
  driverWallets(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: DriverWalletFilter = {}

    """Specify to sort results."""
    sorting: [DriverWalletSort!] = []
  ): DriverWalletConnection!
  driverTransaction(
    """The id of the record to find."""
    id: ID!
  ): DriverTransaction!
  driverTransactions(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: DriverTransactionFilter = {}

    """Specify to sort results."""
    sorting: [DriverTransactionSort!] = []
  ): DriverTransactionConnection!
  orderAggregate(
    """Filter to find records to aggregate on"""
    filter: OrderAggregateFilter
  ): [OrderAggregateResponse!]!
  order(
    """The id of the record to find."""
    id: ID!
  ): Order!
  orders(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: OrderFilter = {}

    """Specify to sort results."""
    sorting: [OrderSort!] = []
  ): OrderConnection!
  announcement(
    """The id of the record to find."""
    id: ID!
  ): Announcement!
  announcements(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: AnnouncementFilter = {}

    """Specify to sort results."""
    sorting: [AnnouncementSort!] = []
  ): AnnouncementConnection!
  coupon(
    """The id of the record to find."""
    id: ID!
  ): Coupon!
  coupons(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: CouponFilter = {}

    """Specify to sort results."""
    sorting: [CouponSort!] = []
  ): CouponConnection!
  regionAggregate(
    """Filter to find records to aggregate on"""
    filter: RegionAggregateFilter
  ): [RegionAggregateResponse!]!
  region(
    """The id of the record to find."""
    id: ID!
  ): Region!
  regions(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: RegionFilter = {}

    """Specify to sort results."""
    sorting: [RegionSort!] = []
  ): RegionConnection!
  paymentGateway(
    """The id of the record to find."""
    id: ID!
  ): PaymentGateway!
  paymentGateways(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: PaymentGatewayFilter = {}

    """Specify to sort results."""
    sorting: [PaymentGatewaySort!] = []
  ): PaymentGatewayConnection!
  carModel(
    """The id of the record to find."""
    id: ID!
  ): CarModel!
  carModels(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: CarModelFilter = {}

    """Specify to sort results."""
    sorting: [CarModelSort!] = []
  ): CarModelConnection!
  carColor(
    """The id of the record to find."""
    id: ID!
  ): CarColor!
  carColors(
    """Specify to filter the records returned."""
    filter: CarColorFilter = {}

    """Specify to sort results."""
    sorting: [CarColorSort!] = []
  ): [CarColor!]!
  feedback(
    """The id of the record to find."""
    id: ID!
  ): Feedback!
  feedbacks(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: FeedbackFilter = {}

    """Specify to sort results."""
    sorting: [FeedbackSort!] = []
  ): FeedbackConnection!
  feedbackParameter(
    """The id of the record to find."""
    id: ID!
  ): FeedbackParameter!
  feedbackParameters(
    """Specify to filter the records returned."""
    filter: FeedbackParameterFilter = {}

    """Specify to sort results."""
    sorting: [FeedbackParameterSort!] = []
  ): [FeedbackParameter!]!
  address(
    """The id of the record to find."""
    id: ID!
  ): Address!
  addresses(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: AddressFilter = {}

    """Specify to sort results."""
    sorting: [AddressSort!] = []
  ): AddressConnection!
  complaintAggregate(
    """Filter to find records to aggregate on"""
    filter: ComplaintAggregateFilter
  ): [ComplaintAggregateResponse!]!
  complaint(
    """The id of the record to find."""
    id: ID!
  ): Complaint!
  complaints(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: ComplaintFilter = {}

    """Specify to sort results."""
    sorting: [ComplaintSort!] = []
  ): ComplaintConnection!
  complaintActivity(
    """The id of the record to find."""
    id: ID!
  ): ComplaintActivity!
  complaintActivities(
    """Specify to filter the records returned."""
    filter: ComplaintActivityFilter = {}

    """Specify to sort results."""
    sorting: [ComplaintActivitySort!] = []
  ): [ComplaintActivity!]!
}

input CalculateFareInput {
  points: [PointInput!]!
}

input ServiceCategoryFilter {
  and: [ServiceCategoryFilter!]
  or: [ServiceCategoryFilter!]
  id: IDFilterComparison
}

input ServiceCategorySort {
  field: ServiceCategorySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ServiceCategorySortFields {
  id
}

input OperatorRoleFilter {
  and: [OperatorRoleFilter!]
  or: [OperatorRoleFilter!]
  id: IDFilterComparison
}

input OperatorRoleSort {
  field: OperatorRoleSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OperatorRoleSortFields {
  id
}

input OperatorFilter {
  and: [OperatorFilter!]
  or: [OperatorFilter!]
  id: IDFilterComparison
}

input OperatorSort {
  field: OperatorSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OperatorSortFields {
  id
}

input PassengerFilter {
  and: [PassengerFilter!]
  or: [PassengerFilter!]
  id: IDFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  mobileNumber: StringFieldComparison
  gender: GenderFilterComparison
}

input GenderFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: Gender
  neq: Gender
  gt: Gender
  gte: Gender
  lt: Gender
  lte: Gender
  like: Gender
  notLike: Gender
  iLike: Gender
  notILike: Gender
  in: [Gender!]
  notIn: [Gender!]
}

input PassengerSort {
  field: PassengerSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PassengerSortFields {
  id
  firstName
  lastName
  mobileNumber
  gender
}

input DriverAggregateFilter {
  and: [DriverAggregateFilter!]
  or: [DriverAggregateFilter!]
  id: IDFilterComparison
  lastName: StringFieldComparison
  mobileNumber: StringFieldComparison
  status: DriverStatusFilterComparison
}

input DriverStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: DriverStatus
  neq: DriverStatus
  gt: DriverStatus
  gte: DriverStatus
  lt: DriverStatus
  lte: DriverStatus
  like: DriverStatus
  notLike: DriverStatus
  iLike: DriverStatus
  notILike: DriverStatus
  in: [DriverStatus!]
  notIn: [DriverStatus!]
}

input DriverFilter {
  and: [DriverFilter!]
  or: [DriverFilter!]
  id: IDFilterComparison
  lastName: StringFieldComparison
  mobileNumber: StringFieldComparison
  status: DriverStatusFilterComparison
}

input DriverSort {
  field: DriverSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum DriverSortFields {
  id
  lastName
  mobileNumber
  status
}

input OrderAggregateFilter {
  and: [OrderAggregateFilter!]
  or: [OrderAggregateFilter!]
  id: IDFilterComparison
  createdOn: DateFieldComparison
  status: OrderStatusFilterComparison
  passengerId: IDFilterComparison
  driverId: IDFilterComparison
}

input OrderStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: OrderStatus
  neq: OrderStatus
  gt: OrderStatus
  gte: OrderStatus
  lt: OrderStatus
  lte: OrderStatus
  like: OrderStatus
  notLike: OrderStatus
  iLike: OrderStatus
  notILike: OrderStatus
  in: [OrderStatus!]
  notIn: [OrderStatus!]
}

input OrderFilter {
  and: [OrderFilter!]
  or: [OrderFilter!]
  id: IDFilterComparison
  createdOn: DateFieldComparison
  status: OrderStatusFilterComparison
  passengerId: IDFilterComparison
  driverId: IDFilterComparison
}

input OrderSort {
  field: OrderSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OrderSortFields {
  id
  createdOn
  status
  passengerId
  driverId
}

input AnnouncementFilter {
  and: [AnnouncementFilter!]
  or: [AnnouncementFilter!]
  id: IDFilterComparison
}

input AnnouncementSort {
  field: AnnouncementSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum AnnouncementSortFields {
  id
}

input CouponFilter {
  and: [CouponFilter!]
  or: [CouponFilter!]
  id: IDFilterComparison
}

input CouponSort {
  field: CouponSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CouponSortFields {
  id
}

input RegionAggregateFilter {
  and: [RegionAggregateFilter!]
  or: [RegionAggregateFilter!]
  id: IDFilterComparison
  currency: StringFieldComparison
}

input PaymentGatewayFilter {
  and: [PaymentGatewayFilter!]
  or: [PaymentGatewayFilter!]
  id: IDFilterComparison
}

input PaymentGatewaySort {
  field: PaymentGatewaySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PaymentGatewaySortFields {
  id
}

input CarModelFilter {
  and: [CarModelFilter!]
  or: [CarModelFilter!]
  id: IDFilterComparison
}

input CarModelSort {
  field: CarModelSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CarModelSortFields {
  id
}

input CarColorFilter {
  and: [CarColorFilter!]
  or: [CarColorFilter!]
  id: IDFilterComparison
}

input CarColorSort {
  field: CarColorSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CarColorSortFields {
  id
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input AddressFilter {
  and: [AddressFilter!]
  or: [AddressFilter!]
  id: IDFilterComparison
}

input AddressSort {
  field: AddressSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum AddressSortFields {
  id
}

type Mutation {
  updatePassword(input: UpdatePasswordInput!): Operator!
  createOrder(input: CreateOrderInput!): Order!
  cancelOrder(orderId: ID!): Order!
  assignDriverToOrder(orderId: ID!, driverId: ID!): Order!
  setMediaOnService(input: SetMediaOnServiceInput!): Service!
  setOptionsOnService(input: SetOptionsOnServiceInput!): Service!
  addRegionsToService(input: AddRegionsToServiceInput!): Service!
  setRegionsOnService(input: SetRegionsOnServiceInput!): Service!
  removeMediaFromService(input: RemoveMediaFromServiceInput!): Service!
  removeOptionsFromService(input: RemoveOptionsFromServiceInput!): Service!
  removeRegionsFromService(input: RemoveRegionsFromServiceInput!): Service!
  createOneService(input: CreateOneServiceInput!): Service!
  updateOneService(input: UpdateOneServiceInput!): Service!
  deleteOneService(input: DeleteOneServiceInput!): ServiceDeleteResponse!
  addServicesToServiceCategory(input: AddServicesToServiceCategoryInput!): ServiceCategory!
  setServicesOnServiceCategory(input: SetServicesOnServiceCategoryInput!): ServiceCategory!
  removeServicesFromServiceCategory(input: RemoveServicesFromServiceCategoryInput!): ServiceCategory!
  createOneServiceCategory(input: CreateOneServiceCategoryInput!): ServiceCategory!
  updateOneServiceCategory(input: UpdateOneServiceCategoryInput!): ServiceCategory!
  deleteOneServiceCategory(input: DeleteOneServiceCategoryInput!): ServiceCategoryDeleteResponse!
  createOneOperatorRole(input: CreateOneOperatorRoleInput!): OperatorRole!
  updateOneOperatorRole(input: UpdateOneOperatorRoleInput!): OperatorRole!
  createOneOperator(input: CreateOneOperatorInput!): Operator!
  updateOneOperator(input: UpdateOneOperatorInput!): Operator!
  setMediaOnPassenger(input: SetMediaOnPassengerInput!): Passenger!
  addAddressesToPassenger(input: AddAddressesToPassengerInput!): Passenger!
  setAddressesOnPassenger(input: SetAddressesOnPassengerInput!): Passenger!
  addWalletsToPassenger(input: AddWalletsToPassengerInput!): Passenger!
  setWalletsOnPassenger(input: SetWalletsOnPassengerInput!): Passenger!
  addTransactionsToPassenger(input: AddTransactionsToPassengerInput!): Passenger!
  setTransactionsOnPassenger(input: SetTransactionsOnPassengerInput!): Passenger!
  removeMediaFromPassenger(input: RemoveMediaFromPassengerInput!): Passenger!
  removeAddressesFromPassenger(input: RemoveAddressesFromPassengerInput!): Passenger!
  removeWalletsFromPassenger(input: RemoveWalletsFromPassengerInput!): Passenger!
  removeTransactionsFromPassenger(input: RemoveTransactionsFromPassengerInput!): Passenger!
  createOnePassenger(input: CreateOnePassengerInput!): Passenger!
  updateOnePassenger(input: UpdateOnePassengerInput!): Passenger!
  setPassengerOnPassengerWallet(input: SetPassengerOnPassengerWalletInput!): PassengerWallet!
  removePassengerFromPassengerWallet(input: RemovePassengerFromPassengerWalletInput!): PassengerWallet!
  setOperatorOnPassengerTransaction(input: SetOperatorOnPassengerTransactionInput!): PassengerTransaction!
  setPassengerOnPassengerTransaction(input: SetPassengerOnPassengerTransactionInput!): PassengerTransaction!
  removeOperatorFromPassengerTransaction(input: RemoveOperatorFromPassengerTransactionInput!): PassengerTransaction!
  removePassengerFromPassengerTransaction(input: RemovePassengerFromPassengerTransactionInput!): PassengerTransaction!
  createOnePassengerTransaction(input: CreateOnePassengerTransactionInput!): PassengerTransaction!
  createOnePassengerAddress(input: CreateOnePassengerAddressInput!): PassengerAddress!
  updateOnePassengerAddress(input: UpdateOnePassengerAddressInput!): PassengerAddress!
  updateManyPassengerAddresses(input: UpdateManyPassengerAddressesInput!): UpdateManyResponse!
  setMediaOnDriver(input: SetMediaOnDriverInput!): Driver!
  addFeedbacksToDriver(input: AddFeedbacksToDriverInput!): Driver!
  setFeedbacksOnDriver(input: SetFeedbacksOnDriverInput!): Driver!
  addWalletsToDriver(input: AddWalletsToDriverInput!): Driver!
  setWalletsOnDriver(input: SetWalletsOnDriverInput!): Driver!
  addEnabledServicesToDriver(input: AddEnabledServicesToDriverInput!): Driver!
  setEnabledServicesOnDriver(input: SetEnabledServicesOnDriverInput!): Driver!
  addDocumentsToDriver(input: AddDocumentsToDriverInput!): Driver!
  setDocumentsOnDriver(input: SetDocumentsOnDriverInput!): Driver!
  addTransactionsToDriver(input: AddTransactionsToDriverInput!): Driver!
  setTransactionsOnDriver(input: SetTransactionsOnDriverInput!): Driver!
  removeMediaFromDriver(input: RemoveMediaFromDriverInput!): Driver!
  removeFeedbacksFromDriver(input: RemoveFeedbacksFromDriverInput!): Driver!
  removeWalletsFromDriver(input: RemoveWalletsFromDriverInput!): Driver!
  removeEnabledServicesFromDriver(input: RemoveEnabledServicesFromDriverInput!): Driver!
  removeDocumentsFromDriver(input: RemoveDocumentsFromDriverInput!): Driver!
  removeTransactionsFromDriver(input: RemoveTransactionsFromDriverInput!): Driver!
  createOneDriver(input: CreateOneDriverInput!): Driver!
  updateOneDriver(input: UpdateOneDriverInput!): Driver!
  setDriverOnDriverWallet(input: SetDriverOnDriverWalletInput!): DriverWallet!
  removeDriverFromDriverWallet(input: RemoveDriverFromDriverWalletInput!): DriverWallet!
  setOperatorOnDriverTransaction(input: SetOperatorOnDriverTransactionInput!): DriverTransaction!
  removeOperatorFromDriverTransaction(input: RemoveOperatorFromDriverTransactionInput!): DriverTransaction!
  createOneDriverTransaction(input: CreateOneDriverTransactionInput!): DriverTransaction!
  setDriverOnOrder(input: SetDriverOnOrderInput!): Order!
  setPassengerOnOrder(input: SetPassengerOnOrderInput!): Order!
  setServiceOnOrder(input: SetServiceOnOrderInput!): Order!
  setCouponOnOrder(input: SetCouponOnOrderInput!): Order!
  addComplaintsToOrder(input: AddComplaintsToOrderInput!): Order!
  setComplaintsOnOrder(input: SetComplaintsOnOrderInput!): Order!
  addConversationsToOrder(input: AddConversationsToOrderInput!): Order!
  setConversationsOnOrder(input: SetConversationsOnOrderInput!): Order!
  addPassengerTransactionsToOrder(input: AddPassengerTransactionsToOrderInput!): Order!
  setPassengerTransactionsOnOrder(input: SetPassengerTransactionsOnOrderInput!): Order!
  addDriverTransactionsToOrder(input: AddDriverTransactionsToOrderInput!): Order!
  setDriverTransactionsOnOrder(input: SetDriverTransactionsOnOrderInput!): Order!
  removeDriverFromOrder(input: RemoveDriverFromOrderInput!): Order!
  removePassengerFromOrder(input: RemovePassengerFromOrderInput!): Order!
  removeServiceFromOrder(input: RemoveServiceFromOrderInput!): Order!
  removeCouponFromOrder(input: RemoveCouponFromOrderInput!): Order!
  removeComplaintsFromOrder(input: RemoveComplaintsFromOrderInput!): Order!
  removeConversationsFromOrder(input: RemoveConversationsFromOrderInput!): Order!
  removePassengerTransactionsFromOrder(input: RemovePassengerTransactionsFromOrderInput!): Order!
  removeDriverTransactionsFromOrder(input: RemoveDriverTransactionsFromOrderInput!): Order!
  createOneAnnouncement(input: CreateOneAnnouncementInput!): Announcement!
  updateOneAnnouncement(input: UpdateOneAnnouncementInput!): Announcement!
  deleteOneAnnouncement(input: DeleteOneAnnouncementInput!): AnnouncementDeleteResponse!
  addAllowedServicesToCoupon(input: AddAllowedServicesToCouponInput!): Coupon!
  setAllowedServicesOnCoupon(input: SetAllowedServicesOnCouponInput!): Coupon!
  removeAllowedServicesFromCoupon(input: RemoveAllowedServicesFromCouponInput!): Coupon!
  createOneCoupon(input: CreateOneCouponInput!): Coupon!
  updateOneCoupon(input: UpdateOneCouponInput!): Coupon!
  createOneRegion(input: CreateOneRegionInput!): Region!
  updateOneRegion(input: UpdateOneRegionInput!): Region!
  deleteOneRegion(input: DeleteOneRegionInput!): RegionDeleteResponse!
  setMediaOnPaymentGateway(input: SetMediaOnPaymentGatewayInput!): PaymentGateway!
  removeMediaFromPaymentGateway(input: RemoveMediaFromPaymentGatewayInput!): PaymentGateway!
  createOnePaymentGateway(input: CreateOnePaymentGatewayInput!): PaymentGateway!
  updateOnePaymentGateway(input: UpdateOnePaymentGatewayInput!): PaymentGateway!
  createOneCarModel(input: CreateOneCarModelInput!): CarModel!
  updateOneCarModel(input: UpdateOneCarModelInput!): CarModel!
  deleteOneCarModel(input: DeleteOneCarModelInput!): CarModelDeleteResponse!
  createOneCarColor(input: CreateOneCarColorInput!): CarColor!
  updateOneCarColor(input: UpdateOneCarColorInput!): CarColor!
  deleteOneCarColor(input: DeleteOneCarColorInput!): CarColorDeleteResponse!
  addParametersToFeedback(input: AddParametersToFeedbackInput!): Feedback!
  setParametersOnFeedback(input: SetParametersOnFeedbackInput!): Feedback!
  removeParametersFromFeedback(input: RemoveParametersFromFeedbackInput!): Feedback!
  updateOneFeedback(input: UpdateOneFeedbackInput!): Feedback!
  createOneFeedbackParameter(input: CreateOneFeedbackParameterInput!): FeedbackParameter!
  updateOneFeedbackParameter(input: UpdateOneFeedbackParameterInput!): FeedbackParameter!
  deleteOneFeedbackParameter(input: DeleteOneFeedbackParameterInput!): FeedbackParameterDeleteResponse!
  setOrderOnComplaint(input: SetOrderOnComplaintInput!): Complaint!
  addActivitiesToComplaint(input: AddActivitiesToComplaintInput!): Complaint!
  setActivitiesOnComplaint(input: SetActivitiesOnComplaintInput!): Complaint!
  removeOrderFromComplaint(input: RemoveOrderFromComplaintInput!): Complaint!
  removeActivitiesFromComplaint(input: RemoveActivitiesFromComplaintInput!): Complaint!
  updateOneComplaint(input: UpdateOneComplaintInput!): Complaint!
  setActorOnComplaintActivity(input: SetActorOnComplaintActivityInput!): ComplaintActivity!
  setAssignedToOnComplaintActivity(input: SetAssignedToOnComplaintActivityInput!): ComplaintActivity!
  removeActorFromComplaintActivity(input: RemoveActorFromComplaintActivityInput!): ComplaintActivity!
  removeAssignedToFromComplaintActivity(input: RemoveAssignedToFromComplaintActivityInput!): ComplaintActivity!
  createOneComplaintActivity(input: CreateOneComplaintActivityInput!): ComplaintActivity!
  createManyComplaintActivities(input: CreateManyComplaintActivitiesInput!): [ComplaintActivity!]!
}

input UpdatePasswordInput {
  oldPassword: String!
  newPasswod: String!
}

input CreateOrderInput {
  passengerId: ID!
  serviceId: ID!
  points: [PointInput!]!
  addresses: [String!]!
  intervalMinutes: Int!
}

input SetMediaOnServiceInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetOptionsOnServiceInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input AddRegionsToServiceInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetRegionsOnServiceInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveMediaFromServiceInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveOptionsFromServiceInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveRegionsFromServiceInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneServiceInput {
  """The record to create"""
  service: CreateService!
}

input CreateService {
  id: ID
  name: String
  description: String
  personCapacity: Int
  categoryId: ID
  baseFare: Float
  roundingFactor: Float
  perHundredMeters: Float
  perMinuteDrive: Float
  perMinuteWait: Float
  prepayPercent: Float
  minimumFee: Float
  searchRadius: Int
  paymentMethod: ServicePaymentMethod
  cancellationTotalFee: Float
  cancellationDriverShare: Float
  providerSharePercent: Int
  providerShareFlat: Float
  twoWayAvailable: Boolean
  maximumDestinationDistance: Int
  timeMultipliers: [TimeMultiplierInput!]
  distanceMultipliers: [DistanceMultiplierInput!]
  mediaId: ID
}

input UpdateOneServiceInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateService!
}

input UpdateService {
  id: ID
  name: String
  description: String
  personCapacity: Int
  categoryId: ID
  baseFare: Float
  roundingFactor: Float
  perHundredMeters: Float
  perMinuteDrive: Float
  perMinuteWait: Float
  prepayPercent: Float
  minimumFee: Float
  searchRadius: Int
  paymentMethod: ServicePaymentMethod
  cancellationTotalFee: Float
  cancellationDriverShare: Float
  providerSharePercent: Int
  providerShareFlat: Float
  twoWayAvailable: Boolean
  maximumDestinationDistance: Int
  timeMultipliers: [TimeMultiplierInput!]
  distanceMultipliers: [DistanceMultiplierInput!]
  mediaId: ID
}

input DeleteOneServiceInput {
  """The id of the record to delete."""
  id: ID!
}

input AddServicesToServiceCategoryInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetServicesOnServiceCategoryInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveServicesFromServiceCategoryInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneServiceCategoryInput {
  """The record to create"""
  serviceCategory: CreateServiceCategory!
}

input CreateServiceCategory {
  id: ID
  name: String
}

input UpdateOneServiceCategoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateServiceCategory!
}

input UpdateServiceCategory {
  id: ID
  name: String
}

input DeleteOneServiceCategoryInput {
  """The id of the record to delete."""
  id: ID!
}

input CreateOneOperatorRoleInput {
  """The record to create"""
  operatorRole: CreateOperatorRole!
}

input CreateOperatorRole {
  id: ID
  title: String
  permissions: [OperatorPermission!]
}

input UpdateOneOperatorRoleInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOperatorRole!
}

input UpdateOperatorRole {
  id: ID
  title: String
  permissions: [OperatorPermission!]
}

input CreateOneOperatorInput {
  """The record to create"""
  operator: CreateOperatorInput!
}

input CreateOperatorInput {
  firstName: String
  lastName: String
  userName: String!
  password: String!
  mobileNumber: String!
  email: String
  roleId: ID!
}

input UpdateOneOperatorInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOperator!
}

input UpdateOperator {
  id: ID
  firstName: String
  lastName: String
  userName: String
  mobileNumber: String
  email: String
  roleId: ID
}

input SetMediaOnPassengerInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input AddAddressesToPassengerInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetAddressesOnPassengerInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddWalletsToPassengerInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetWalletsOnPassengerInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddTransactionsToPassengerInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetTransactionsOnPassengerInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveMediaFromPassengerInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveAddressesFromPassengerInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveWalletsFromPassengerInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveTransactionsFromPassengerInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOnePassengerInput {
  """The record to create"""
  passenger: CreatePassenger!
}

input CreatePassenger {
  id: ID
  status: PassengerStatus
  firstName: String
  lastName: String
  mobileNumber: String
  registrationTimestamp: DateTime
  email: String
  gender: Gender
  isResident: Boolean
  idNumber: String
}

input UpdateOnePassengerInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePassenger!
}

input UpdatePassenger {
  id: ID
  status: PassengerStatus
  firstName: String
  lastName: String
  mobileNumber: String
  registrationTimestamp: DateTime
  email: String
  gender: Gender
  isResident: Boolean
  idNumber: String
}

input SetPassengerOnPassengerWalletInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemovePassengerFromPassengerWalletInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetOperatorOnPassengerTransactionInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetPassengerOnPassengerTransactionInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveOperatorFromPassengerTransactionInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemovePassengerFromPassengerTransactionInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOnePassengerTransactionInput {
  """The record to create"""
  passengerTransaction: CreatePassengerTransaction!
}

input CreatePassengerTransaction {
  id: ID
  action: TransactionAction
  createdAt: DateTime
  deductType: PassengerDeductTransactionType
  rechargeType: PassengerRechargeTransactionType
  status: TransactionStatus
  amount: Float
  currency: String
  refrenceNumber: String
  description: String
  passengerId: ID
  operatorId: ID
  orderId: ID
}

input CreateOnePassengerAddressInput {
  """The record to create"""
  passengerAddress: CreatePassengerAddress!
}

input CreatePassengerAddress {
  id: ID
  type: PassengerAddressType
  title: String
  details: String
  location: PointInput
  passengerId: ID
}

input UpdateOnePassengerAddressInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePassengerAddress!
}

input UpdatePassengerAddress {
  id: ID
  type: PassengerAddressType
  title: String
  details: String
  location: PointInput
  passengerId: ID
}

input UpdateManyPassengerAddressesInput {
  """Filter used to find fields to update"""
  filter: PassengerAddressUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePassengerAddress!
}

input PassengerAddressUpdateFilter {
  and: [PassengerAddressUpdateFilter!]
  or: [PassengerAddressUpdateFilter!]
  id: IDFilterComparison
  passengerId: IDFilterComparison
}

input SetMediaOnDriverInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input AddFeedbacksToDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetFeedbacksOnDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddWalletsToDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetWalletsOnDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddEnabledServicesToDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetEnabledServicesOnDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddDocumentsToDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetDocumentsOnDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddTransactionsToDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetTransactionsOnDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveMediaFromDriverInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveFeedbacksFromDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveWalletsFromDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveEnabledServicesFromDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveDocumentsFromDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveTransactionsFromDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneDriverInput {
  """The record to create"""
  driver: CreateDriver!
}

input CreateDriver {
  id: ID
  firstName: String
  lastName: String
  mobileNumber: String
  certificateNumber: String
  email: String
  carProductionYear: Int
  carId: ID
  carColorId: ID
  carPlate: String
  status: DriverStatus
  gender: Gender
  rating: Int
  reviewCount: Int
  registrationTimestamp: DateTime
  lastSeenTimestamp: DateTime
  accountNumber: String
  bankName: String
  bankRoutingNumber: String
  bankSwift: String
  address: String
  softRejectionNote: String
  mediaId: ID
}

input UpdateOneDriverInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDriverInput!
}

input UpdateDriverInput {
  carId: ID
  carColorId: ID
  firstName: String
  lastName: String
  certificateNumber: String
  email: String
  carProductionYear: Int
  carPlate: String
  status: DriverStatus
  gender: Gender
  accountNumber: String
  bankName: String
  bankRoutingNumber: String
  bankSwift: String
  address: String
  softRejectionNote: String
  mediaId: ID
}

input SetDriverOnDriverWalletInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveDriverFromDriverWalletInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetOperatorOnDriverTransactionInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveOperatorFromDriverTransactionInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOneDriverTransactionInput {
  """The record to create"""
  driverTransaction: CreateDriverTransaction!
}

input CreateDriverTransaction {
  createdAt: DateTime
  action: TransactionAction
  status: TransactionStatus
  deductType: DriverDeductTransactionType
  rechargeType: DriverRechargeTransactionType
  amount: Float
  currency: String
  refrenceNumber: String
  driverId: ID
  paymentGatewayId: ID
  operatorId: ID
  orderId: ID
  description: String
}

input SetDriverOnOrderInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetPassengerOnOrderInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetServiceOnOrderInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetCouponOnOrderInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input AddComplaintsToOrderInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetComplaintsOnOrderInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddConversationsToOrderInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetConversationsOnOrderInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddPassengerTransactionsToOrderInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetPassengerTransactionsOnOrderInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddDriverTransactionsToOrderInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetDriverTransactionsOnOrderInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveDriverFromOrderInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemovePassengerFromOrderInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveServiceFromOrderInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveCouponFromOrderInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveComplaintsFromOrderInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveConversationsFromOrderInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemovePassengerTransactionsFromOrderInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveDriverTransactionsFromOrderInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneAnnouncementInput {
  """The record to create"""
  announcement: CreateAnnouncement!
}

input CreateAnnouncement {
  id: ID
  title: String
  description: String
  url: String
  startAt: DateTime
  expireAt: DateTime
}

input UpdateOneAnnouncementInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAnnouncement!
}

input UpdateAnnouncement {
  id: ID
  title: String
  description: String
  url: String
  startAt: DateTime
  expireAt: DateTime
}

input DeleteOneAnnouncementInput {
  """The id of the record to delete."""
  id: ID!
}

input AddAllowedServicesToCouponInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetAllowedServicesOnCouponInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveAllowedServicesFromCouponInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneCouponInput {
  """The record to create"""
  coupon: CreateCoupon!
}

input CreateCoupon {
  id: ID
  code: String
  title: String
  description: String
  manyUsersCanUse: Int
  manyTimesUserCanUse: Int
  minimumCost: Float
  maximumCost: Float
  startAt: DateTime
  expireAt: DateTime
  discountPercent: Int
  discountFlat: Int
  creditGift: Float
  isEnabled: Boolean
  isFirstTravelOnly: Boolean
}

input UpdateOneCouponInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCoupon!
}

input UpdateCoupon {
  id: ID
  code: String
  title: String
  description: String
  manyUsersCanUse: Int
  manyTimesUserCanUse: Int
  minimumCost: Float
  maximumCost: Float
  startAt: DateTime
  expireAt: DateTime
  discountPercent: Int
  discountFlat: Int
  creditGift: Float
  isEnabled: Boolean
  isFirstTravelOnly: Boolean
}

input CreateOneRegionInput {
  """The record to create"""
  region: CreateRegion!
}

input CreateRegion {
  id: ID
  name: String
  currency: String
  enabled: Boolean
  location: [[PointInput!]!]
}

input UpdateOneRegionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRegion!
}

input UpdateRegion {
  id: ID
  name: String
  currency: String
  enabled: Boolean
  location: [[PointInput!]!]
}

input DeleteOneRegionInput {
  """The id of the record to delete."""
  id: ID!
}

input SetMediaOnPaymentGatewayInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveMediaFromPaymentGatewayInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOnePaymentGatewayInput {
  """The record to create"""
  paymentGateway: CreatePaymentGateway!
}

input CreatePaymentGateway {
  id: ID
  enabled: Boolean
  title: String
  type: PaymentGatewayType
  publicKey: String
  privateKey: String
  merchantId: String
  saltKey: String
  mediaId: ID
}

input UpdateOnePaymentGatewayInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePaymentGateway!
}

input UpdatePaymentGateway {
  id: ID
  enabled: Boolean
  title: String
  type: PaymentGatewayType
  publicKey: String
  privateKey: String
  merchantId: String
  saltKey: String
  mediaId: ID
}

input CreateOneCarModelInput {
  """The record to create"""
  carModel: CreateCarModel!
}

input CreateCarModel {
  id: ID
  name: String
}

input UpdateOneCarModelInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCarModel!
}

input UpdateCarModel {
  id: ID
  name: String
}

input DeleteOneCarModelInput {
  """The id of the record to delete."""
  id: ID!
}

input CreateOneCarColorInput {
  """The record to create"""
  carColor: CreateCarColor!
}

input CreateCarColor {
  id: ID
  name: String
}

input UpdateOneCarColorInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCarColor!
}

input UpdateCarColor {
  id: ID
  name: String
}

input DeleteOneCarColorInput {
  """The id of the record to delete."""
  id: ID!
}

input AddParametersToFeedbackInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetParametersOnFeedbackInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveParametersFromFeedbackInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input UpdateOneFeedbackInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateFeedback!
}

input UpdateFeedback {
  id: ID
  score: Int
  reviewTimestamp: DateTime
  description: String
  driverId: ID
  orderId: ID
}

input CreateOneFeedbackParameterInput {
  """The record to create"""
  feedbackParameter: CreateFeedbackParameter!
}

input CreateFeedbackParameter {
  id: ID
  title: String
  isGood: Boolean
}

input UpdateOneFeedbackParameterInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateFeedbackParameter!
}

input UpdateFeedbackParameter {
  id: ID
  title: String
  isGood: Boolean
}

input DeleteOneFeedbackParameterInput {
  """The id of the record to delete."""
  id: ID!
}

input SetOrderOnComplaintInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input AddActivitiesToComplaintInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetActivitiesOnComplaintInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveOrderFromComplaintInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveActivitiesFromComplaintInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input UpdateOneComplaintInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateComplaint!
}

input UpdateComplaint {
  id: ID
  inscriptionTimestamp: DateTime
  requestedByDriver: Boolean
  subject: String
  content: String
  status: ComplaintStatus
  orderId: ID
}

input SetActorOnComplaintActivityInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetAssignedToOnComplaintActivityInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveActorFromComplaintActivityInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveAssignedToFromComplaintActivityInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOneComplaintActivityInput {
  """The record to create"""
  complaintActivity: CreateComplaintActivity!
}

input CreateComplaintActivity {
  id: ID
  type: ComplaintActivityType
  comment: String
  complaintId: ID
}

input CreateManyComplaintActivitiesInput {
  """Array of records to create"""
  complaintActivities: [CreateComplaintActivity!]!
}

type Subscription {
  orderUpdated(orderId: ID!): Order!
}