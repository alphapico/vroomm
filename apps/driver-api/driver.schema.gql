# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CarModel {
  id: ID!
}

type CarColor {
  id: ID!
}

type Driver {
  id: ID!
  carProductionYear: Int!
  carModelId: ID!
  carColorId: ID!
  searchDistance: Int!
  car: CarModel
  carColor: CarColor
}

type DriverEdge {
  """The node containing the Driver"""
  node: Driver!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type Login {
  jwtToken: String!
}

type Media {
  id: ID!
}

type Passenger {
  id: ID!
  media: Media
}

type Service {
  id: ID!
  media: Media!
}

type ServiceOption {
  id: ID!
}

type Order {
  id: ID!
  status: OrderStatus!
  createdOn: Timestamp!
  distanceBest: Int!
  durationBest: Int!
  costBest: Float!
  optionsAggregate(
    """Filter to find records to aggregate on"""
    filter: ServiceOptionAggregateFilter
  ): [OrderOptionsAggregateResponse!]!
  driver: Driver!
  rider: Passenger!
  service: Service!
  options(
    """Specify to filter the records returned."""
    filter: ServiceOptionFilter = {}

    """Specify to sort results."""
    sorting: [ServiceOptionSort!] = []
  ): [ServiceOption!]!
}

enum OrderStatus {
  Requested
  NotFound
  NoCloseFound
  Found
  DriverAccepted
  Arrived
  WaitingForPrePay
  DriverCanceled
  PassengerCanceled
  Started
  WaitingForPostPay
  WaitingForReview
  Finished
  Booked
  Expired
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input ServiceOptionAggregateFilter {
  and: [ServiceOptionAggregateFilter!]
  or: [ServiceOptionAggregateFilter!]
  id: IDFilterComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input ServiceOptionFilter {
  and: [ServiceOptionFilter!]
  or: [ServiceOptionFilter!]
  id: IDFilterComparison
}

input ServiceOptionSort {
  field: ServiceOptionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ServiceOptionSortFields {
  id
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type OrderEdge {
  """The node containing the Order"""
  node: Order!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type OrderConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [OrderEdge!]!
}

type OrderAggregateGroupBy {
  id: ID
  status: OrderStatus
  createdOn: Timestamp
  costBest: Float
  driverId: ID
}

type OrderCountAggregate {
  id: Int
  status: Int
  createdOn: Int
  costBest: Int
  driverId: Int
}

type OrderSumAggregate {
  id: Float
  costBest: Float
  driverId: Float
}

type OrderAvgAggregate {
  id: Float
  costBest: Float
  driverId: Float
}

type OrderMinAggregate {
  id: ID
  status: OrderStatus
  createdOn: Timestamp
  costBest: Float
  driverId: ID
}

type OrderMaxAggregate {
  id: ID
  status: OrderStatus
  createdOn: Timestamp
  costBest: Float
  driverId: ID
}

type OrderAggregateResponse {
  groupBy: OrderAggregateGroupBy
  count: OrderCountAggregate
  sum: OrderSumAggregate
  avg: OrderAvgAggregate
  min: OrderMinAggregate
  max: OrderMaxAggregate
}

type OrderOptionsAggregateGroupBy {
  id: ID
}

type OrderOptionsCountAggregate {
  id: Int
}

type OrderOptionsSumAggregate {
  id: Float
}

type OrderOptionsAvgAggregate {
  id: Float
}

type OrderOptionsMinAggregate {
  id: ID
}

type OrderOptionsMaxAggregate {
  id: ID
}

type OrderOptionsAggregateResponse {
  groupBy: OrderOptionsAggregateGroupBy
  count: OrderOptionsCountAggregate
  sum: OrderOptionsSumAggregate
  avg: OrderOptionsAvgAggregate
  min: OrderOptionsMinAggregate
  max: OrderOptionsMaxAggregate
}

type PassengerEdge {
  """The node containing the Passenger"""
  node: Passenger!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type MediaEdge {
  """The node containing the Media"""
  node: Media!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type Announcement {
  id: ID!
  userType: AnnouncementUserType!
}

enum AnnouncementUserType {
  Driver
  Passenger
  Operator
}

type DriverTransacion {
  id: ID!
}

type DriverWallet {
  id: ID!
}

type PaymentGateway {
  id: ID!
  enabled: Boolean!
  media: Media
}

type StatisticsResult {
  currency: String!
}

type TopUpWalletResponse {
  status: TopUpWalletStatus!
}

enum TopUpWalletStatus {
  OK
  Redirect
}

type DriverTransacionEdge {
  """The node containing the DriverTransacion"""
  node: DriverTransacion!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type DriverTransacionConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [DriverTransacionEdge!]!
}

type ServiceEdge {
  """The node containing the Service"""
  node: Service!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type Complaint {
  id: ID!
}

type ComplaintEdge {
  """The node containing the Complaint"""
  node: Complaint!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type Query {
  requireUpdate(versionCode: Int!): VersionStatus!
  driver(
    """The id of the record to find."""
    id: ID!
  ): Driver!
  carModels(
    """Specify to filter the records returned."""
    filter: CarModelFilter = {}

    """Specify to sort results."""
    sorting: [CarModelSort!] = []
  ): [CarModel!]!
  carColors(
    """Specify to filter the records returned."""
    filter: CarColorFilter = {}

    """Specify to sort results."""
    sorting: [CarColorSort!] = []
  ): [CarColor!]!
  orderAggregate(
    """Filter to find records to aggregate on"""
    filter: OrderAggregateFilter
  ): [OrderAggregateResponse!]!
  order(
    """The id of the record to find."""
    id: ID!
  ): Order!
  orders(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: OrderFilter = {}

    """Specify to sort results."""
    sorting: [OrderSort!] = []
  ): OrderConnection!
  availableOrders: [Order!]!
  getStats(timeframe: TimeQuery!): StatisticsResult!
  getStatsNew(timeframe: TimeQuery!, startDate: DateTime!, endDate: DateTime!): StatisticsResult!
  driverTransacions(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: DriverTransacionFilter = {}

    """Specify to sort results."""
    sorting: [DriverTransacionSort!] = []
  ): DriverTransacionConnection!
  driverWallets(
    """Specify to filter the records returned."""
    filter: DriverWalletFilter = {}

    """Specify to sort results."""
    sorting: [DriverWalletSort!] = []
  ): [DriverWallet!]!
  paymentGateways(
    """Specify to filter the records returned."""
    filter: PaymentGatewayFilter = {}

    """Specify to sort results."""
    sorting: [PaymentGatewaySort!] = []
  ): [PaymentGateway!]!
  announcements(
    """Specify to filter the records returned."""
    filter: AnnouncementFilter = {}

    """Specify to sort results."""
    sorting: [AnnouncementSort!] = []
  ): [Announcement!]!
}

enum VersionStatus {
  Latest
  MandatoryUpdate
  OptionalUpdate
}

input CarModelFilter {
  and: [CarModelFilter!]
  or: [CarModelFilter!]
  id: IDFilterComparison
}

input CarModelSort {
  field: CarModelSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CarModelSortFields {
  id
}

input CarColorFilter {
  and: [CarColorFilter!]
  or: [CarColorFilter!]
  id: IDFilterComparison
}

input CarColorSort {
  field: CarColorSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CarColorSortFields {
  id
}

input OrderAggregateFilter {
  and: [OrderAggregateFilter!]
  or: [OrderAggregateFilter!]
  id: IDFilterComparison
  status: OrderStatusFilterComparison
  createdOn: DateFieldComparison
  costBest: NumberFieldComparison
  driverId: IDFilterComparison
}

input OrderStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: OrderStatus
  neq: OrderStatus
  gt: OrderStatus
  gte: OrderStatus
  lt: OrderStatus
  lte: OrderStatus
  like: OrderStatus
  notLike: OrderStatus
  iLike: OrderStatus
  notILike: OrderStatus
  in: [OrderStatus!]
  notIn: [OrderStatus!]
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input OrderFilter {
  and: [OrderFilter!]
  or: [OrderFilter!]
  id: IDFilterComparison
  status: OrderStatusFilterComparison
  createdOn: DateFieldComparison
  costBest: NumberFieldComparison
  driverId: IDFilterComparison
}

input OrderSort {
  field: OrderSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OrderSortFields {
  id
  status
  createdOn
  costBest
  driverId
}

enum TimeQuery {
  Daily
  Weekly
  Monthly
}

input DriverTransacionFilter {
  and: [DriverTransacionFilter!]
  or: [DriverTransacionFilter!]
  id: IDFilterComparison
  driverId: IDFilterComparison
}

input DriverTransacionSort {
  field: DriverTransacionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum DriverTransacionSortFields {
  id
  driverId
}

input DriverWalletFilter {
  and: [DriverWalletFilter!]
  or: [DriverWalletFilter!]
  id: IDFilterComparison
  driverId: IDFilterComparison
}

input DriverWalletSort {
  field: DriverWalletSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum DriverWalletSortFields {
  id
  driverId
}

input PaymentGatewayFilter {
  and: [PaymentGatewayFilter!]
  or: [PaymentGatewayFilter!]
  id: IDFilterComparison
  enabled: BooleanFieldComparison
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input PaymentGatewaySort {
  field: PaymentGatewaySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PaymentGatewaySortFields {
  id
  enabled
}

input AnnouncementFilter {
  and: [AnnouncementFilter!]
  or: [AnnouncementFilter!]
  id: IDFilterComparison
  userType: AnnouncementUserTypeFilterComparison
}

input AnnouncementUserTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: AnnouncementUserType
  neq: AnnouncementUserType
  gt: AnnouncementUserType
  gte: AnnouncementUserType
  lt: AnnouncementUserType
  lte: AnnouncementUserType
  like: AnnouncementUserType
  notLike: AnnouncementUserType
  iLike: AnnouncementUserType
  notILike: AnnouncementUserType
  in: [AnnouncementUserType!]
  notIn: [AnnouncementUserType!]
}

input AnnouncementSort {
  field: AnnouncementSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum AnnouncementSortFields {
  id
  userType
}

type Mutation {
  login(input: LoginInput!): Login!
  deleteUser: Driver!
  updateOneDriver(input: UpdateOneDriverInput!): Driver!
  updateOneOrder(input: UpdateOneOrderInput!): Order!
  updateDriversLocationNew(point: PointInput!): [Order!]!
  topUpWallet(input: TopUpWalletInput!): TopUpWalletResponse!
  createOneComplaint(input: CreateOneComplaintInput!): Complaint!
}

input LoginInput {
  firebaseToken: String!
}

input UpdateOneDriverInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDriverInput!
}

input UpdateDriverInput {
  carProductionYear: Int!
  carModelId: ID!
  carColorId: ID!
  searchDistance: Int!
}

input UpdateOneOrderInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOrderInput!
}

input UpdateOrderInput {
  status: OrderStatus!
}

input PointInput {
  lat: Float!
  lng: Float!
}

input TopUpWalletInput {
  gatewayId: ID!
}

input CreateOneComplaintInput {
  """The record to create"""
  complaint: ComplaintInput!
}

input ComplaintInput {
  orderId: ID!
}

type Subscription {
  orderCreated: Order!
  orderUpdated: Order!
  orderRemoved: Order!
}