# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Passenger {
  id: ID!
}

type PassengerEdge {
  """The node containing the Passenger"""
  node: Passenger!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type Media {
  id: ID!
}

type MediaEdge {
  """The node containing the Media"""
  node: Media!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type ServiceCategory {
  id: ID!
}

type ServiceOption {
  id: ID!
}

type Service {
  id: ID!
  personCapacity: Int!
  prepayPercent: Int!
  media: Media!
  options(
    """Specify to filter the records returned."""
    filter: ServiceOptionFilter = {}

    """Specify to sort results."""
    sorting: [ServiceOptionSort!] = []
  ): [ServiceOption!]!
}

input ServiceOptionFilter {
  and: [ServiceOptionFilter!]
  or: [ServiceOptionFilter!]
  id: IDFilterComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input ServiceOptionSort {
  field: ServiceOptionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ServiceOptionSortFields {
  id
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type ServiceEdge {
  """The node containing the Service"""
  node: Service!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PassengerAddress {
  id: ID!
}

type PassengerAddressDeleteResponse {
  id: ID
}

type Announcement {
  id: ID!
}

type AnnouncementEdge {
  """The node containing the Announcement"""
  node: Announcement!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type AnnouncementConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [AnnouncementEdge!]!
}

type PaymentGateway {
  id: ID!
  enabled: Boolean!
  media: Media
}

type PassengerTransacion {
  id: ID!
  createdAt: Timestamp!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type PassengerWallet {
  id: ID!
}

type TopUpWalletResponse {
  status: TopUpWalletStatus!
}

enum TopUpWalletStatus {
  OK
  Redirect
}

type PassengerTransacionEdge {
  """The node containing the PassengerTransacion"""
  node: PassengerTransacion!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PassengerTransacionConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [PassengerTransacionEdge!]!
}

type Complaint {
  id: ID!
}

type ComplaintEdge {
  """The node containing the Complaint"""
  node: Complaint!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type Query {
  requireUpdate(versionCode: Int!): VersionStatus!
  passenger(
    """The id of the record to find."""
    id: ID!
  ): Passenger!
  serviceCategories(
    """Specify to filter the records returned."""
    filter: ServiceCategoryFilter = {}

    """Specify to sort results."""
    sorting: [ServiceCategorySort!] = []
  ): [ServiceCategory!]!
  passengerAddress(
    """The id of the record to find."""
    id: ID!
  ): PassengerAddress!
  passengerAddresses(
    """Specify to filter the records returned."""
    filter: PassengerAddressFilter = {}

    """Specify to sort results."""
    sorting: [PassengerAddressSort!] = []
  ): [PassengerAddress!]!
  announcement(
    """The id of the record to find."""
    id: ID!
  ): Announcement!
  announcements(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: AnnouncementFilter = {}

    """Specify to sort results."""
    sorting: [AnnouncementSort!] = []
  ): AnnouncementConnection!
  passengerTransacions(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: PassengerTransacionFilter = {}

    """Specify to sort results."""
    sorting: [PassengerTransacionSort!] = []
  ): PassengerTransacionConnection!
  passengerWallets(
    """Specify to filter the records returned."""
    filter: PassengerWalletFilter = {}

    """Specify to sort results."""
    sorting: [PassengerWalletSort!] = []
  ): [PassengerWallet!]!
  paymentGateways(
    """Specify to filter the records returned."""
    filter: PaymentGatewayFilter = {}

    """Specify to sort results."""
    sorting: [PaymentGatewaySort!] = []
  ): [PaymentGateway!]!
}

enum VersionStatus {
  Latest
  MandatoryUpdate
  OptionalUpdate
}

input ServiceCategoryFilter {
  and: [ServiceCategoryFilter!]
  or: [ServiceCategoryFilter!]
  id: IDFilterComparison
}

input ServiceCategorySort {
  field: ServiceCategorySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ServiceCategorySortFields {
  id
}

input PassengerAddressFilter {
  and: [PassengerAddressFilter!]
  or: [PassengerAddressFilter!]
  id: IDFilterComparison
  passengerId: IDFilterComparison
}

input PassengerAddressSort {
  field: PassengerAddressSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PassengerAddressSortFields {
  id
  passengerId
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input AnnouncementFilter {
  and: [AnnouncementFilter!]
  or: [AnnouncementFilter!]
  id: IDFilterComparison
}

input AnnouncementSort {
  field: AnnouncementSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum AnnouncementSortFields {
  id
}

input PassengerTransacionFilter {
  and: [PassengerTransacionFilter!]
  or: [PassengerTransacionFilter!]
  id: IDFilterComparison
  passengerId: IDFilterComparison
}

input PassengerTransacionSort {
  field: PassengerTransacionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PassengerTransacionSortFields {
  id
  passengerId
}

input PassengerWalletFilter {
  and: [PassengerWalletFilter!]
  or: [PassengerWalletFilter!]
  id: IDFilterComparison
  passengerId: IDFilterComparison
}

input PassengerWalletSort {
  field: PassengerWalletSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PassengerWalletSortFields {
  id
  passengerId
}

input PaymentGatewayFilter {
  and: [PaymentGatewayFilter!]
  or: [PaymentGatewayFilter!]
  id: IDFilterComparison
  enabled: BooleanFieldComparison
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input PaymentGatewaySort {
  field: PaymentGatewaySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PaymentGatewaySortFields {
  id
  enabled
}

type Mutation {
  updateOnePassenger(input: UpdateOnePassengerInput!): Passenger!
  createOnePassengerAddress(input: CreateOnePassengerAddressInput!): PassengerAddress!
  updateOnePassengerAddress(input: UpdateOnePassengerAddressInput!): PassengerAddress!
  deleteOnePassengerAddress(input: DeleteOnePassengerAddressInput!): PassengerAddressDeleteResponse!
  createOneComplaint(input: CreateOneComplaintInput!): Complaint!
  topUpWallet(input: TopUpWalletInput!): TopUpWalletResponse!
}

input UpdateOnePassengerInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePassengerInput!
}

input UpdatePassengerInput {
  firstName: String!
}

input CreateOnePassengerAddressInput {
  """The record to create"""
  passengerAddress: CreatePassengerAddressInput!
}

input CreatePassengerAddressInput {
  title: String!
}

input UpdateOnePassengerAddressInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: CreatePassengerAddressInput!
}

input DeleteOnePassengerAddressInput {
  """The id of the record to delete."""
  id: ID!
}

input CreateOneComplaintInput {
  """The record to create"""
  complaint: ComplaintInput!
}

input ComplaintInput {
  orderId: ID!
}

input TopUpWalletInput {
  gatewayId: ID!
}