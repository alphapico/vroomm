# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Passenger {
  id: ID!
}

type PassengerEdge {
  """The node containing the Passenger"""
  node: Passenger!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type Media {
  id: ID!
}

type MediaEdge {
  """The node containing the Media"""
  node: Media!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type Announcement {
  id: ID!
}

type AnnouncementEdge {
  """The node containing the Announcement"""
  node: Announcement!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type AnnouncementConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [AnnouncementEdge!]!
}

type Query {
  requireUpdate(versionCode: Int!): VersionStatus!
  passenger(
    """The id of the record to find."""
    id: ID!
  ): Passenger!
  announcement(
    """The id of the record to find."""
    id: ID!
  ): Announcement!
  announcements(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: AnnouncementFilter = {}

    """Specify to sort results."""
    sorting: [AnnouncementSort!] = []
  ): AnnouncementConnection!
}

enum VersionStatus {
  Latest
  MandatoryUpdate
  OptionalUpdate
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input AnnouncementFilter {
  and: [AnnouncementFilter!]
  or: [AnnouncementFilter!]
  id: IDFilterComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input AnnouncementSort {
  field: AnnouncementSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum AnnouncementSortFields {
  id
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type Mutation {
  updateOnePassenger(input: UpdateOnePassengerInput!): Passenger!
}

input UpdateOnePassengerInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePassengerInput!
}

input UpdatePassengerInput {
  firstName: String!
}